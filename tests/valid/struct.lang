import "core:c";

typedef MyStruct struct {
    a: i32,
};

typedef NestedStruct struct {
    name: *char,
    sub: struct {
        a: i32,
        b: i32,
        s: [5]MyStruct,
    },
};

func print_nested(n: *NestedStruct) {
    printf(c"n = %p\n", n);
    printf(c"n.name = %s\n", n.name);
    printf(c"n.name[0] = %c\n", n.name[0]);
    printf(c"n.name.* = %c\n", n.name.*);
    printf(c"n.sub.a = %d\n", n.sub.a);
    printf(c"n.sub.b = %d\n", n.sub.b);
    printf(c"n.*.sub.b = %d\n", n.*.sub.b);
    printf(c"n.*.(sub).b = %d\n", n.*.(sub).b);
    printf(c"n.sub.s[4].a = %d\n", n.sub.s[4].a);
}

func main() {
    var a_struct: MyStruct;
    a_struct.a = 32;
    var b_struct: *MyStruct = &a_struct;

    printf(c"a_struct.a = %d\n", a_struct.a);
    printf(c"b_struct.a = %d\n", b_struct.a);

    var anon: struct { c: i32 };
    anon.c = 321;
    printf(c"anon.c = %d\n", anon.c);

    var nested: NestedStruct;
    nested.name = c"yo";
    nested.sub.a = 123;
    nested.sub.b = 321;
    nested.sub.s[4].a = 3;
    printf(c"&nested = %p\n", &nested);
    printf(c"nested.name = %s\n", nested.name);
    print_nested(&nested);

    printf(c"@size_of(NestedStruct) = %lu\n", @size_of(NestedStruct));
    printf(c"@size_of(nested) = %lu\n", @size_of(nested));
    printf(c"@align_of(NestedStruct) = %lu\n", @align_of(NestedStruct));
    printf(c"@align_of(nested) = %lu\n", @align_of(nested));

    var ptr: *NestedStruct = malloc(@size_of(ptr.*));
    free(ptr);

    printf(c"@size_of(*ptr) = %lu\n", @size_of(ptr.*));

    var my_u32: u32 = 123;
    printf(c"my_u32 = %u\n", my_u32);

    var my_u64: u64 = cast(u64) my_u32;
    printf(c"my_u64 = %lu\n", my_u64);

    var my_i64: i64 = cast(i64) my_u32;
    printf(c"my_i64 = %ld\n", my_i64);

    var my_float: float = cast(float) my_u32;
    printf(c"my_float = %f\n", my_float);
}
