module main

import "core:c"
import "core:os"
import "core:fmt"
import "core:fs"
import "core:strings"

typedef TestRun struct
{
    pid: os.Pid,
    path: string,
    status: i32,
};

var failures: uint = 0;

version "win32" {
    const compiler_exe = ".\\flc.exe";
} else {
    const compiler_exe = "./flc";
}

func run_tests(batch_name: string, tests_path: string, expected_status: i32)
{
    var entries = fs.dir_entries_alloc(tests_path);
    defer fs.dir_entries_free(entries);

    var runs: [dyn]TestRun;
    defer delete(&runs);

    for (entry in entries) 
    {
        if (strings.ends_with(entry, ".lang"))
        {
            var path = strings.concat_alloc(tests_path, entry);

            var pid, err = os.spawn_process(
                compiler_exe,
                []string{compiler_exe, "-r", path},
                null);

            if (err)
            {
                fmt.eprint("Failed to spawn compiler process\n");
                c.exit(1);
            }
            else
            {
                var run: TestRun;
                run.pid = pid;
                run.path = path;
                append(&runs, run);
                fmt.eprintf("Testing '%'\n", path);
            }
        }
    }

    defer for (run in runs)
    {
        delete(&run.path);
    }

    for (*run in runs)
    {
        var status, err = os.wait_process(run.pid);
        if (err)
        {
            fmt.eprint("Failed to wait for process\n");
            c.exit(1);
        }
        run.status = status;
    }

    var local_failures: uint = 0;
    for (*run in runs)
    {
        if (run.status != expected_status)
        {
            fmt.eprintf("Failed '%' with code %\n", run.path, run.status);
            local_failures += 1;
        }
    }

    failures += local_failures;
}

func main()
{
    run_tests("Valid tests", "tests/valid/", 0);
    run_tests("Invalid tests", "tests/invalid/", 1);

    fmt.eprint("=========================================\n");
    fmt.eprint("                Results                  \n");
    fmt.eprint("=========================================\n");

    if (failures == 0)
    {
        fmt.eprint("Success!\n");
    }
    else
    {
        fmt.eprint("Some tests failed!\n");
    }
}
