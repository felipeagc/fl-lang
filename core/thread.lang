typedef ThreadStart fn* (arg: *void) -> *void;

version (posix) {
    pub typedef Thread distinct *void;
    pub typedef Mutex distinct [8]*void; // opaque
    pub typedef Cond distinct [8]*void; // opaque

    extern fn pthread_create(thrd: *Thread, attr: *void, start: ThreadStart, arg: *void) -> i32;
    extern fn pthread_join(thrd: Thread, retval: *void) -> i32; 
    extern fn usleep(usec: u32) -> i32;
    extern fn pthread_detach(thread: Thread) -> i32;
    extern fn pthread_exit(retval: *void);
    extern fn pthread_mutex_init(mtx: *Mutex, attr: *void) -> i32;
    extern fn pthread_mutex_destroy(mtx: *Mutex) -> i32;
    extern fn pthread_mutex_lock(mtx: *Mutex) -> i32;
    extern fn pthread_mutex_trylock(mtx: *Mutex) -> i32;
    extern fn pthread_mutex_unlock(mtx: *Mutex) -> i32;
    extern fn pthread_cond_init(cond: *Cond, attr: *void) -> i32;
    extern fn pthread_cond_destroy(cond: *Cond) -> i32;
    extern fn pthread_cond_signal(cond: *Cond) -> i32;
    extern fn pthread_cond_broadcast(cond: *Cond) -> i32;
    extern fn pthread_cond_wait(cond: *Cond, mtx: *Mutex) -> i32;
}

//
// Threads
//

pub fn thread_create(start: ThreadStart, arg: *void) -> Thread {
    version (posix) {
        var thread: Thread;
        pthread_create(&thread, null, start, arg);
        return thread;
    }
}

pub fn thread_wait(thread: Thread) {
    version (posix) {
        pthread_join(thread, null);
    }
}

pub fn thread_sleep(milliseconds: u32) {
    version (posix) {
        usleep(1000 * milliseconds);
    }
}

pub fn thread_detach(thread: Thread) {
    version (posix) {
        pthread_detach(thread);
    }
}

pub fn thread_exit() {
    version (posix) {
        pthread_exit(cast(*void)0);
    }
}

//
// Mutex
//

pub fn mutex_init(mtx: *Mutex) {
    version (posix) {
        pthread_mutex_init(mtx, null);
    }
}

pub fn mutex_destroy(mtx: *Mutex) {
    version (posix) {
        pthread_mutex_destroy(mtx);
    }
}

pub fn mutex_lock(mtx: *Mutex) {
    version (posix) {
        pthread_mutex_lock(mtx);
    }
}

pub fn mutex_trylock(mtx: *Mutex) {
    version (posix) {
        pthread_mutex_trylock(mtx);
    }
}

pub fn mutex_unlock(mtx: *Mutex) {
    version (posix) {
        pthread_mutex_unlock(mtx);
    }
}

//
// Condition variable
//

pub fn cond_init(cond: *Cond) {
    version (posix) {
        pthread_cond_init(cond, null);
    }
}

pub fn cond_destroy(cond: *Cond) {
    version (posix) {
        pthread_cond_destroy(cond);
    }
}

pub fn cond_wake_one(cond: *Cond) {
    version (posix) {
        pthread_cond_signal(cond);
    }
}

pub fn cond_wake_all(cond: *Cond) {
    version (posix) {
        pthread_cond_broadcast(cond);
    }
}

pub fn cond_wait(cond: *Cond, mtx: *Mutex) {
    version (posix) {
        pthread_cond_wait(cond, mtx);
    }
}
