module fmt

import c "core:c"
import os "core:os"
import runtime "core:runtime"

pub func print(str: string) {
    var buf: [_]byte = void;
    buf.ptr = cast(*byte)str.ptr;
    buf.len = str.len;
    os.write_to_stream(os.get_stdout(), buf);
}

pub func eprint(str: string) {
    var buf: [_]byte = void;
    buf.ptr = cast(*byte)str.ptr;
    buf.len = str.len;
    os.write_to_stream(os.get_stderr(), buf);
}

pub func printf(fmt: string, args: ..@Any) {
    var buf: [4096]char = void;
    var str = buf[0..0];
    sprintf(fmt, &str, ..args);
    print(str);
}

pub func eprintf(fmt: string, args: ..@Any) {
    var buf: [4096]char = void;
    var str = buf[0..0];
    sprintf(fmt, &str, ..args);
    eprint(str);
}

func signed_itoa(into: *string, num: i64, base: i64) {
    var buf: [32]char;
    var len: uint = 0;
    var n = num;
    var negative = n < 0;

    if (negative) n = -n;

    while (n > 0) {
        var rem = n % base;
        n /= base;

        var ch: char = void;
        if (rem <= 10) {
            ch = cast(char)rem + '0';
        } else {
            ch = cast(char)rem + 'A';
        }

        buf[len] = ch;
        len += 1;
    }

    if (negative) {
        into.*[into.*.len] = '-';
        into.*.len += 1;
    }

    while (len) {
        len -= 1;
        into.*[into.*.len] = buf[len];
        into.*.len += 1;
    }
}

func unsigned_itoa(into: *string, num: u64, base: u64) {
    var buf: [32]char;
    var len: uint = 0;

    var n = num;
    while (n > 0) {
        var rem = n % base;
        n /= base;

        var ch: char = void;
        if (rem <= 10) {
            ch = cast(char)rem + '0';
        } else {
            ch = cast(char)rem + 'A';
        }

        buf[len] = ch;
        len += 1;
    }

    while (len) {
        len -= 1;
        into.*[into.*.len] = buf[len];
        into.*.len += 1;
    }
}

pub func sprintf(fmt: string, into: *string, args: ..@Any) {
    var argi: uint = 0;

    for (ch in fmt) {
        if (ch == '%') {
            var arg = &args[argi];
            switch (arg.type_info.kind) {

            case runtime.TypeKind.Int: 
                if (arg.type_info.integer.is_signed) {
                    var num: i64 = void;

                    switch (arg.type_info.integer.num_bits) {
                    case 8 : num = cast(i64)(cast(*i8)arg.ptr).*;
                    case 16: num = cast(i64)(cast(*i16)arg.ptr).*;
                    case 32: num = cast(i64)(cast(*i32)arg.ptr).*;
                    case 64: num = cast(i64)(cast(*i64)arg.ptr).*;
                    }

                    signed_itoa(into, num, 10);
                } else {
                    var num: u64 = void;

                    switch (arg.type_info.integer.num_bits) {
                    case 8:  num = cast(u64)(cast(*u8)arg.ptr).*;
                    case 16: num = cast(u64)(cast(*u16)arg.ptr).*;
                    case 32: num = cast(u64)(cast(*u32)arg.ptr).*;
                    case 64: num = cast(u64)(cast(*u64)arg.ptr).*;
                    }

                    unsigned_itoa(into, num, 10);
                }

            case runtime.TypeKind.Slice: 
                var sub = arg.type_info.array.sub;

                if (sub.kind == runtime.TypeKind.Int &&
                    sub.integer.num_bits == 8 &&
                    sub.integer.is_signed)
                {
                    var str = cast(*string)(arg.ptr);
                    for (ch in str.*) {
                        into.*[into.*.len] = ch;
                        into.*.len += 1;
                    }
                }

            default:
            }

            argi += 1;
        } else {
            into.*[into.*.len] = ch;
            into.*.len += 1;
        }
    }
}
