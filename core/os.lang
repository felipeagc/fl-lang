module os

version(posix) {
    import posix "core:posix"
    import strings "core:strings"
    import c "core:c"

    extern var environ: **char;

    pub typedef Handle i32;
    pub const NULL_HANDLE: Handle = 0;

    pub typedef TimeSpec struct {
        sec: i64,
        nsec: i64,
    };

    #[inline] pub func get_stdin() -> Handle { return 0; }
    #[inline] pub func get_stdout() -> Handle { return 1; }
    #[inline] pub func get_stderr() -> Handle { return 2; }

    pub func write_to_stream(stream: Handle, buf: [_]byte) -> int {
        return cast(int)posix.write(stream, buf.ptr, buf.len);
    }

    pub func spawn_process(args: [_]string, stdout: Handle, stderr: Handle) -> Handle {
        if (args.len < 1) {
            return NULL_HANDLE;
        }

        var actual_args: **char = c.malloc(@size_of(*char) * (args.len + 1));
        defer c.free(actual_args);

        for (var i: uint = 0; i < args.len; i += 1) {
            actual_args[i] = strings.to_c_str_alloc(args[i]);
        }
        defer for (var i: uint = 0; i < args.len; i += 1) {
            c.free(actual_args[i]);
        }

        actual_args[args.len] = null; // null terminate the list

        var spawn_actions: posix.posix_spawn_file_actions_t;
        posix.posix_spawn_file_actions_init(&spawn_actions);
        defer posix.posix_spawn_file_actions_destroy(&spawn_actions);

        if (stdout != NULL_HANDLE) {
            posix.posix_spawn_file_actions_adddup2(&spawn_actions, stdout, get_stdout());
        } else {
            posix.posix_spawn_file_actions_addopen(&spawn_actions, get_stdout(),
                c"/dev/null", posix.O_WRONLY | posix.O_CREAT | posix.O_TRUNC, 0644);
        }

        if (stderr != NULL_HANDLE) {
            posix.posix_spawn_file_actions_adddup2(&spawn_actions, stdout, get_stdout());
        } else {
            posix.posix_spawn_file_actions_addopen(&spawn_actions, get_stderr(),
                c"/dev/null", posix.O_WRONLY | posix.O_CREAT | posix.O_TRUNC, 0644);
        }

        var pid: Handle;
        var result = posix.posix_spawnp(
            &pid,
            actual_args[0],
            &spawn_actions,
            null,
            actual_args,
            environ);

        if (result != 0) {
            return NULL_HANDLE;
        }

        return pid;
    }

    pub func wait_process(process: Handle, status: *i32) -> bool {
        var tmp_status: i32;
        var success = posix.waitpid(process, &tmp_status, 0) != -1;

        if (success) {
            if (posix.WIFEXITED(tmp_status)) {
                status.* = posix.WEXITSTATUS(tmp_status);
            } else if (posix.WIFSIGNALED(tmp_status)) {
                status.* = -posix.WTERMSIG(tmp_status);
            } else {
                return false;
            }
        }

        return success;
    }

    pub func last_write_time(path: string) -> TimeSpec {
        var stat: posix.stat_t;
        c_path := strings.to_c_str_alloc(path);
        defer c.free(c_path);

        posix.stat(c_path, &stat);
        return TimeSpec{stat.st_ctim.tv_sec, stat.st_ctim.tv_nsec};
    }
}
