module build

import "core:os"
import "core:fmt"
import "core:compiler"

pub typedef Workspace struct {
    targets: [dyn]Target,
};

pub typedef Target struct {
    input: string,
    output: string,
    link_with: []string,
    library_paths: []string,
    opt_level: u32,
};

pub func add_target(builder: *Workspace, target: *Target) {
    @append(&builder.targets, target.*);
}

pub func build(builder: *Workspace) {
    for (*target in builder.targets) {
        var comp: *compiler.Compiler = compiler.create(&compiler.Arguments{
            input = target.input,
            output = target.output,
            link_with = target.link_with,
            library_paths  = target.library_paths,
            opt_level = target.opt_level,
        });
        defer compiler.destroy(comp);

        var output_time, _ = os.last_write_time(target.output);

        var deps = compiler.get_deps_alloc(comp);
        defer @delete(&deps);

        var should_recompile = false;

        for (dep_path in deps) {
            var input_time, _ = os.last_write_time(dep_path);
            if (input_time.sec >= output_time.sec) {
                should_recompile = true;
                break;
            }
        }

        if (should_recompile) {
            fmt.printf("=> Building target '%'\n", target.output);

            compiler.compile(comp);
        } else {
            fmt.printf("=> '%' is up to date\n", target.output);
        }
    }
}
