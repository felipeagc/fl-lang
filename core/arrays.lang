module arrays

import c "core:c"

const DEFAULT_ARRAY_CAP: uint = 8;

pub func reserve(V)(arr: *[dyn]V, desired_cap: uint) {
    if (arr.cap < desired_cap) {
        var new_ptr = c.realloc(arr.ptr, @size_of(V) * cast(c.Size)desired_cap);
        arr.cap = desired_cap;
        arr.ptr = new_ptr;
    }
}

pub func push(V)(arr: *[dyn]V, val: V) -> *V {
    if (arr.len >= arr.cap) {
        if (arr.cap == 0) arr.cap = DEFAULT_ARRAY_CAP;
        else arr.cap *= 2;

        var new_ptr = c.realloc(arr.ptr, @size_of(V) * cast(c.Size)arr.cap);
        arr.ptr = new_ptr;
    }

    var elem_ptr = &arr.*[arr.len];
    arr.len += 1;
    elem_ptr.* = val;
    return elem_ptr;
}

#[inline]
pub func pop(V)(arr: *[dyn]V) -> *V {
    if (arr.len == 0) return null;
    arr.len -= 1;
    return &arr.*[arr.len];
}

#[inline]
pub func free(V)(arr: *[dyn]V) {
    if (arr.ptr) c.free(arr.ptr);

    arr.ptr = null;
    arr.cap = 0;
    arr.len = 0;
}
