module os

import "core:os/os_types"
import "core:sys/win32"
import "core:strings"
import "core:c"

func get_stream_handle(type: win32.DWORD) -> Handle {
    var fd = win32.GetStdHandle(type);
    win32.SetHandleInformation(fd, win32.HANDLE_FLAG_INHERIT, 0);
    return fd; 
}

pub func get_stdin() -> Handle {
    return get_stream_handle(win32.STD_INPUT_HANDLE);
}

pub func get_stdout() -> Handle {
    return get_stream_handle(win32.STD_OUTPUT_HANDLE);
}

pub func get_stderr() -> Handle {
    return get_stream_handle(win32.STD_ERROR_HANDLE);
}

pub func write_to_stream(stream: Handle, buf: []byte) -> (int, Error) {
    var tmp_buf = buf;
    var single_bytes_written: win32.DWORD;
    var total_bytes_written: win32.DWORD;

    while (cast(uint)total_bytes_written < buf.len) {
        var success = win32.WriteFile(
            stream,
            cast(win32.LPCVOID)tmp_buf.ptr,
            cast(win32.DWORD)tmp_buf.len,
            &single_bytes_written,
            null);

        total_bytes_written += single_bytes_written;
        tmp_buf = tmp_buf[cast(uint)single_bytes_written:tmp_buf.len];

        if (!success) {
            return 0, Error.WriteError;
        }
    }


    return cast(int)total_bytes_written, Error.Success;
}

pub func get_cwd_alloc() -> string {
    var required_size = win32.GetCurrentDirectory(0, null);
    var buf: *win32.TCHAR = alloc(size_of(win32.TCHAR) * cast(uint)required_size);
    defer dealloc(buf);
    win32.GetCurrentDirectory(required_size, buf);
    return win32.wstr_to_string_alloc(buf, required_size);
}

pub func chdir(path: string) -> bool {
    var wpath = win32.to_cwstr_alloc(path);
    defer dealloc(wpath);
    return win32.SetCurrentDirectory(wpath) != 0;
}

pub func file_exists(path: string) -> bool {
    var wpath = win32.to_cwstr_alloc(path);
    defer dealloc(wpath);
    return win32.PathFileExistsW(wpath);
}

pub func spawn_process(name: string, args: []string, attr: *ProcAttr) -> (Pid, Error) {
    var si: win32.STARTUPINFOA;
    si.cb = cast(u32)size_of(win32.STARTUPINFOA);
    if (attr && attr.stdout != NULL_HANDLE) si.hStdOutput = attr.stdout;
    if (attr && attr.stderr != NULL_HANDLE) si.hStdError = attr.stderr;
    si.dwFlags |= win32.STARTF_USESTDHANDLES;

    var pi: win32.PROCESS_INFORMATION;

    var total_length: uint;
    for (*arg in args) {
        total_length += (arg.len + 1);
    }

    var pos: uint = 0;
    var c_cmd_line: *char = alloc(total_length);
    defer dealloc(c_cmd_line);

    for (*arg in args) {
        for (c in arg.*) {
            c_cmd_line[pos] = c;
            pos += 1;
        }
        c_cmd_line[pos] = ' ';
        pos += 1;
    }
    c_cmd_line[pos-1] = 0;

    var dir: win32.LPCSTR;
    if (attr && attr.dir.len > 0) {
        dir = strings.to_c_str_alloc(attr.dir);
    }
    defer if (attr && attr.dir.len > 0) {
        dealloc(dir);
    }

    var result = win32.CreateProcessA(
        null, // application name
        c_cmd_line,  // command line
        null, // process attributes
        null, // thread attributes
        true, // inherit handles
        0, // creation flags
        null, // environment
        dir, // current dir
        &si,
        &pi);

    if (!result) {
        return Pid{}, Error.SpawnError;
    }

    return Pid{
        hProcess = pi.hProcess,
        hThread = pi.hThread,
    }, Error.Success;
}

pub func wait_process(process: Pid) -> (i32, Error) {
    var exit_code: win32.DWORD;
    win32.WaitForSingleObject(process.hProcess, win32.INFINITE);
    win32.GetExitCodeProcess(process.hProcess, &exit_code);

    win32.CloseHandle(process.hProcess);
    win32.CloseHandle(process.hThread);

    return cast(i32)exit_code, Error.Success;
}

pub func last_write_time(path: string) -> (TimeSpec, Error) {
    var wpath = win32.to_cwstr_alloc(path);
    defer dealloc(wpath);

    var data: win32.WIN32_FILE_ATTRIBUTE_DATA;
    var success = win32.GetFileAttributesExW(
        wpath,
        win32.GetFileExInfoStandard,
        cast(win32.LPVOID)&data);
    if (!success) {
        return TimeSpec{}, Error.StatError;
    }

    var low = cast(u64)data.ftLastWriteTime.dwLowDateTime;
    var high = cast(u64)data.ftLastWriteTime.dwHighDateTime;
    var nano100: u64 = low | (high << 32);

    var seconds = nano100 / 10000000;
    var nanos = (nano100 - (seconds * 10000000)) * 100;

    return TimeSpec{sec = seconds, nsec = nanos}, Error.Success;
}
