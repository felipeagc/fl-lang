module os

import "core:os/os_types"
import "core:sys/posix"
import "core:c"

extern var environ: **char;

func to_c_str_alloc(str: string) -> *char {
    var cstr: *char = alloc(str.len + 1);
    c.strncpy(cstr, str.ptr, str.len);
    cstr[str.len] = 0;
    return cstr;
}

#[inline] pub func get_stdin() -> Handle { return 0; }
#[inline] pub func get_stdout() -> Handle { return 1; }
#[inline] pub func get_stderr() -> Handle { return 2; }


pub func write_to_stream(stream: Handle, buf: []byte) -> (int, Error) {
    var bytes_written: int = cast(int)posix.write(stream, buf.ptr, buf.len);
    if (bytes_written == -1) {
        return 0, Error.WriteError;
    }

    return bytes_written, Error.Success;
}

pub func get_cwd_alloc() -> string {
    var buf = posix.getcwd(null, 0);
    return buf[0:c.strlen(buf)];
}

pub func chdir(path: string) -> bool {
    var c_path = to_c_str_alloc(path);
    defer dealloc(c_path);
    return posix.chdir(c_path) == 0;
}

pub func file_exists(path: string) -> bool {
    var c_path = to_c_str_alloc(path);
    defer dealloc(c_path);
    return (posix.access(c_path, posix.F_OK) != -1);
}

pub func spawn_process(name: string, args: []string, attr: *ProcAttr) -> (Pid, Error) {
    if (args.len < 1) {
        return NULL_HANDLE, Error.InvalidSpawnArgs;
    }

    var old_dir = get_cwd_alloc();
    defer delete(&old_dir);

    if (attr && attr.dir.len > 0) {
        chdir(attr.dir);
    }
    defer if (attr && attr.dir.len > 0) {
        chdir(old_dir);
    }

    var actual_name = to_c_str_alloc(name);
    defer dealloc(actual_name);

    var actual_args: **char = alloc(size_of(*char) * (args.len + 1));
    defer dealloc(actual_args);

    for (var i: uint = 0; i < args.len; i += 1) {
        actual_args[i] = to_c_str_alloc(args[i]);
    }
    defer for (var i: uint = 0; i < args.len; i += 1) {
        dealloc(actual_args[i]);
    }

    actual_args[args.len] = null; // null terminate the list

    var spawn_actions: posix.posix_spawn_file_actions_t;
    posix.posix_spawn_file_actions_init(&spawn_actions);
    defer posix.posix_spawn_file_actions_destroy(&spawn_actions);

    if (attr && attr.stdout != NULL_HANDLE) {
        posix.posix_spawn_file_actions_adddup2(&spawn_actions, attr.stdout, get_stdout());
    } else {
        posix.posix_spawn_file_actions_addopen(&spawn_actions, get_stdout(),
            c"/dev/null", posix.O_WRONLY | posix.O_CREAT | posix.O_TRUNC, 0644);
    }

    if (attr && attr.stderr != NULL_HANDLE) {
        posix.posix_spawn_file_actions_adddup2(&spawn_actions, attr.stderr, get_stderr());
    } else {
        posix.posix_spawn_file_actions_addopen(&spawn_actions, get_stderr(),
            c"/dev/null", posix.O_WRONLY | posix.O_CREAT | posix.O_TRUNC, 0644);
    }

    var pid: Handle;
    var result = posix.posix_spawnp(
        &pid,
        actual_name,
        &spawn_actions,
        null,
        actual_args,
        environ);

    if (result != 0) {
        return NULL_HANDLE, Error.SpawnError;
    }

    return pid, Error.Success;
}

pub func wait_process(process: Pid) -> (i32, Error) {
    var status: i32;
    var success = posix.waitpid(process, &status, 0) != -1;

    if (success) {
        if (posix.WIFEXITED(status)) {
            status = posix.WEXITSTATUS(status);
        } else if (posix.WIFSIGNALED(status)) {
            status = -posix.WTERMSIG(status);
        } else {
            return 1, Error.WaitError;
        }
    }

    return status, Error.Success;
}

pub func last_write_time(path: string) -> (TimeSpec, Error) {
    var stat: posix.stat_t;
    var c_path = to_c_str_alloc(path);
    defer dealloc(c_path);

    var result = posix.stat(c_path, &stat);
    if (result == -1) {
        return TimeSpec{}, Error.StatError;
    }

    return TimeSpec{
        cast(u64)stat.st_ctim.tv_sec,
        cast(u64)stat.st_ctim.tv_nsec
    }, Error.Success;
}
