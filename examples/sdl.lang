pub const SDL_INIT_TIMER: Uint32          = 0x00000001;
pub const SDL_INIT_AUDIO: Uint32          = 0x00000010;
pub const SDL_INIT_VIDEO: Uint32          = 0x00000020;
pub const SDL_INIT_JOYSTICK: Uint32       = 0x00000200;
pub const SDL_INIT_HAPTIC: Uint32         = 0x00001000;
pub const SDL_INIT_GAMECONTROLLER: Uint32 = 0x00002000;
pub const SDL_INIT_EVENTS: Uint32         = 0x00004000;
pub const SDL_INIT_SENSOR: Uint32         = 0x00008000;
pub const SDL_INIT_NOPARACHUTE: Uint32    = 0x00100000;
pub const SDL_INIT_EVERYTHING: Uint32 =
            SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS |
            SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER | SDL_INIT_SENSOR;

pub const SDL_FALSE: u32 = 0;
pub const SDL_TRUE: u32 = 1;
pub typedef SDL_bool u32;
pub typedef Sint8 i8;
pub typedef Uint8 u8;
pub typedef Sint16 i16;
pub typedef Uint16 u16;
pub typedef Sint32 i32;
pub typedef Uint32 u32;
pub typedef Sint64 i64;
pub typedef Uint64 u64;
pub typedef SDL_compile_time_assert_uint8 [1]i32;
pub typedef SDL_compile_time_assert_sint8 [1]i32;
pub typedef SDL_compile_time_assert_uint16 [1]i32;
pub typedef SDL_compile_time_assert_sint16 [1]i32;
pub typedef SDL_compile_time_assert_uint32 [1]i32;
pub typedef SDL_compile_time_assert_sint32 [1]i32;
pub typedef SDL_compile_time_assert_uint64 [1]i32;
pub typedef SDL_compile_time_assert_sint64 [1]i32;
pub const DUMMY_ENUM_VALUE: u32 = 0;
pub typedef SDL_DUMMY_ENUM u32;
pub typedef SDL_compile_time_assert_enum [1]i32;
pub extern fn SDL_malloc(size: uint) -> *void;
pub extern fn SDL_calloc(nmemb: uint, size: uint) -> *void;
pub extern fn SDL_realloc(mem: *void, size: uint) -> *void;
pub extern fn SDL_free(mem: *void);
pub typedef SDL_malloc_func fn* (_: uint) -> *void;
pub typedef SDL_calloc_func fn* (_: uint, _: uint) -> *void;
pub typedef SDL_realloc_func fn* (_: *void, _: uint) -> *void;
pub typedef SDL_free_func fn* (_: *void);
pub extern fn SDL_GetMemoryFunctions(malloc_func: *SDL_malloc_func, calloc_func: *SDL_calloc_func, realloc_func: *SDL_realloc_func, free_func: *SDL_free_func);
pub extern fn SDL_SetMemoryFunctions(malloc_func: SDL_malloc_func, calloc_func: SDL_calloc_func, realloc_func: SDL_realloc_func, free_func: SDL_free_func) -> i32;
pub extern fn SDL_GetNumAllocations() -> i32;
pub extern fn SDL_getenv(name: *i8) -> *i8;
pub extern fn SDL_setenv(name: *i8, value: *i8, overwrite: i32) -> i32;
pub extern fn SDL_qsort(base: *void, nmemb: uint, size: uint, compare: fn* (_: *void, _: *void) -> i32);
pub extern fn SDL_abs(x: i32) -> i32;
pub extern fn SDL_isdigit(x: i32) -> i32;
pub extern fn SDL_isspace(x: i32) -> i32;
pub extern fn SDL_toupper(x: i32) -> i32;
pub extern fn SDL_tolower(x: i32) -> i32;
pub extern fn SDL_memset(dst: *void, c: i32, len: uint) -> *void;
pub extern fn SDL_memset4(dst: *void, val: Uint32, dwords: uint);
pub extern fn SDL_memcpy(dst: *void, src: *void, len: uint) -> *void;
pub extern fn SDL_memmove(dst: *void, src: *void, len: uint) -> *void;
pub extern fn SDL_memcmp(s1: *void, s2: *void, len: uint) -> i32;
pub extern fn SDL_wcsdup(wstr: *i32) -> *i32;
pub extern fn SDL_wcslen(wstr: *i32) -> uint;
pub extern fn SDL_wcslcpy(dst: *i32, src: *i32, maxlen: uint) -> uint;
pub extern fn SDL_wcslcat(dst: *i32, src: *i32, maxlen: uint) -> uint;
pub extern fn SDL_wcscmp(str1: *i32, str2: *i32) -> i32;
pub extern fn SDL_strlen(str: *i8) -> uint;
pub extern fn SDL_strlcpy(dst: *i8, src: *i8, maxlen: uint) -> uint;
pub extern fn SDL_utf8strlcpy(dst: *i8, src: *i8, dst_bytes: uint) -> uint;
pub extern fn SDL_strlcat(dst: *i8, src: *i8, maxlen: uint) -> uint;
pub extern fn SDL_strdup(str: *i8) -> *i8;
pub extern fn SDL_strrev(str: *i8) -> *i8;
pub extern fn SDL_strupr(str: *i8) -> *i8;
pub extern fn SDL_strlwr(str: *i8) -> *i8;
pub extern fn SDL_strchr(str: *i8, c: i32) -> *i8;
pub extern fn SDL_strrchr(str: *i8, c: i32) -> *i8;
pub extern fn SDL_strstr(haystack: *i8, needle: *i8) -> *i8;
pub extern fn SDL_utf8strlen(str: *i8) -> uint;
pub extern fn SDL_itoa(value: i32, str: *i8, radix: i32) -> *i8;
pub extern fn SDL_uitoa(value: u32, str: *i8, radix: i32) -> *i8;
pub extern fn SDL_ltoa(value: i64, str: *i8, radix: i32) -> *i8;
pub extern fn SDL_ultoa(value: u64, str: *i8, radix: i32) -> *i8;
pub extern fn SDL_lltoa(value: Sint64, str: *i8, radix: i32) -> *i8;
pub extern fn SDL_ulltoa(value: Uint64, str: *i8, radix: i32) -> *i8;
pub extern fn SDL_atoi(str: *i8) -> i32;
pub extern fn SDL_atof(str: *i8) -> double;
pub extern fn SDL_strtol(str: *i8, endp: **i8, base: i32) -> i64;
pub extern fn SDL_strtoul(str: *i8, endp: **i8, base: i32) -> u64;
pub extern fn SDL_strtoll(str: *i8, endp: **i8, base: i32) -> Sint64;
pub extern fn SDL_strtoull(str: *i8, endp: **i8, base: i32) -> Uint64;
pub extern fn SDL_strtod(str: *i8, endp: **i8) -> double;
pub extern fn SDL_strcmp(str1: *i8, str2: *i8) -> i32;
pub extern fn SDL_strncmp(str1: *i8, str2: *i8, maxlen: uint) -> i32;
pub extern fn SDL_strcasecmp(str1: *i8, str2: *i8) -> i32;
pub extern fn SDL_strncasecmp(str1: *i8, str2: *i8, len: uint) -> i32;
pub extern fn SDL_sscanf(text: *i8, fmt: *i8) -> i32;
pub extern fn SDL_snprintf(text: *i8, maxlen: uint, fmt: *i8) -> i32;
pub extern fn SDL_acos(x: double) -> double;
pub extern fn SDL_acosf(x: float) -> float;
pub extern fn SDL_asin(x: double) -> double;
pub extern fn SDL_asinf(x: float) -> float;
pub extern fn SDL_atan(x: double) -> double;
pub extern fn SDL_atanf(x: float) -> float;
pub extern fn SDL_atan2(x: double, y: double) -> double;
pub extern fn SDL_atan2f(x: float, y: float) -> float;
pub extern fn SDL_ceil(x: double) -> double;
pub extern fn SDL_ceilf(x: float) -> float;
pub extern fn SDL_copysign(x: double, y: double) -> double;
pub extern fn SDL_copysignf(x: float, y: float) -> float;
pub extern fn SDL_cos(x: double) -> double;
pub extern fn SDL_cosf(x: float) -> float;
pub extern fn SDL_exp(x: double) -> double;
pub extern fn SDL_expf(x: float) -> float;
pub extern fn SDL_fabs(x: double) -> double;
pub extern fn SDL_fabsf(x: float) -> float;
pub extern fn SDL_floor(x: double) -> double;
pub extern fn SDL_floorf(x: float) -> float;
pub extern fn SDL_fmod(x: double, y: double) -> double;
pub extern fn SDL_fmodf(x: float, y: float) -> float;
pub extern fn SDL_log(x: double) -> double;
pub extern fn SDL_logf(x: float) -> float;
pub extern fn SDL_log10(x: double) -> double;
pub extern fn SDL_log10f(x: float) -> float;
pub extern fn SDL_pow(x: double, y: double) -> double;
pub extern fn SDL_powf(x: float, y: float) -> float;
pub extern fn SDL_scalbn(x: double, n: i32) -> double;
pub extern fn SDL_scalbnf(x: float, n: i32) -> float;
pub extern fn SDL_sin(x: double) -> double;
pub extern fn SDL_sinf(x: float) -> float;
pub extern fn SDL_sqrt(x: double) -> double;
pub extern fn SDL_sqrtf(x: float) -> float;
pub extern fn SDL_tan(x: double) -> double;
pub extern fn SDL_tanf(x: float) -> float;
pub typedef _SDL_iconv_t struct {
};
pub typedef SDL_iconv_t *_SDL_iconv_t;
pub extern fn SDL_iconv_open(tocode: *i8, fromcode: *i8) -> SDL_iconv_t;
pub extern fn SDL_iconv_close(cd: SDL_iconv_t) -> i32;
pub extern fn SDL_iconv(cd: SDL_iconv_t, inbuf: **i8, inbytesleft: *uint, outbuf: **i8, outbytesleft: *uint) -> uint;
pub extern fn SDL_iconv_string(tocode: *i8, fromcode: *i8, inbuf: *i8, inbytesleft: uint) -> *i8;
pub extern fn SDL_memcpy4(dst: *void, src: *void, dwords: uint) -> *void;
pub typedef SDL_main_func fn* (_: i32, _: **i8) -> i32;
pub extern fn SDL_main(argc: i32, argv: **i8) -> i32;
pub extern fn SDL_SetMainReady();
pub const SDL_ASSERTION_RETRY: u32 = 0;
pub const SDL_ASSERTION_BREAK: u32 = 1;
pub const SDL_ASSERTION_ABORT: u32 = 2;
pub const SDL_ASSERTION_IGNORE: u32 = 3;
pub const SDL_ASSERTION_ALWAYS_IGNORE: u32 = 4;
pub typedef SDL_AssertState u32;
pub typedef SDL_AssertData struct {
    always_ignore: i32,
    trigger_count: u32,
    condition: *i8,
    filename: *i8,
    linenum: i32,
    function: *i8,
    next: *struct {},
};
pub extern fn SDL_ReportAssertion(: *SDL_AssertData, : *i8, : *i8, : i32) -> SDL_AssertState;
pub typedef SDL_AssertionHandler fn* (_: *SDL_AssertData, _: *void) -> SDL_AssertState;
pub extern fn SDL_SetAssertionHandler(handler: SDL_AssertionHandler, userdata: *void);
pub extern fn SDL_GetDefaultAssertionHandler() -> SDL_AssertionHandler;
pub extern fn SDL_GetAssertionHandler(puserdata: **void) -> SDL_AssertionHandler;
pub extern fn SDL_GetAssertionReport() -> *SDL_AssertData;
pub extern fn SDL_ResetAssertionReport();
pub typedef SDL_SpinLock i32;
pub extern fn SDL_AtomicTryLock(lock: *SDL_SpinLock) -> SDL_bool;
pub extern fn SDL_AtomicLock(lock: *SDL_SpinLock);
pub extern fn SDL_AtomicUnlock(lock: *SDL_SpinLock);
pub extern fn SDL_MemoryBarrierReleaseFunction();
pub extern fn SDL_MemoryBarrierAcquireFunction();
pub typedef SDL_atomic_t struct {
    value: i32,
};
pub extern fn SDL_AtomicCAS(a: *SDL_atomic_t, oldval: i32, newval: i32) -> SDL_bool;
pub extern fn SDL_AtomicSet(a: *SDL_atomic_t, v: i32) -> i32;
pub extern fn SDL_AtomicGet(a: *SDL_atomic_t) -> i32;
pub extern fn SDL_AtomicAdd(a: *SDL_atomic_t, v: i32) -> i32;
pub extern fn SDL_AtomicCASPtr(a: **void, oldval: *void, newval: *void) -> SDL_bool;
pub extern fn SDL_AtomicSetPtr(a: **void, v: *void) -> *void;
pub extern fn SDL_AtomicGetPtr(a: **void) -> *void;
pub extern fn SDL_SetError(fmt: *i8) -> i32;
pub extern fn SDL_GetError() -> *i8;
pub extern fn SDL_ClearError();
pub const SDL_ENOMEM: u32 = 0;
pub const SDL_EFREAD: u32 = 1;
pub const SDL_EFWRITE: u32 = 2;
pub const SDL_EFSEEK: u32 = 3;
pub const SDL_UNSUPPORTED: u32 = 4;
pub const SDL_LASTERROR: u32 = 5;
pub typedef SDL_errorcode u32;
pub extern fn SDL_Error(code: SDL_errorcode) -> i32;
pub extern fn SDL_Swap16(x: Uint16) -> Uint16;
pub extern fn SDL_Swap32(x: Uint32) -> Uint32;
pub extern fn SDL_Swap64(x: Uint64) -> Uint64;
pub extern fn SDL_SwapFloat(x: float) -> float;
pub typedef SDL_mutex struct {
};
pub extern fn SDL_CreateMutex() -> *SDL_mutex;
pub extern fn SDL_LockMutex(mutex: *SDL_mutex) -> i32;
pub extern fn SDL_TryLockMutex(mutex: *SDL_mutex) -> i32;
pub extern fn SDL_UnlockMutex(mutex: *SDL_mutex) -> i32;
pub extern fn SDL_DestroyMutex(mutex: *SDL_mutex);
pub typedef SDL_semaphore struct {
};
pub typedef SDL_sem SDL_semaphore;
pub extern fn SDL_CreateSemaphore(initial_value: Uint32) -> *SDL_sem;
pub extern fn SDL_DestroySemaphore(sem: *SDL_sem);
pub extern fn SDL_SemWait(sem: *SDL_sem) -> i32;
pub extern fn SDL_SemTryWait(sem: *SDL_sem) -> i32;
pub extern fn SDL_SemWaitTimeout(sem: *SDL_sem, ms: Uint32) -> i32;
pub extern fn SDL_SemPost(sem: *SDL_sem) -> i32;
pub extern fn SDL_SemValue(sem: *SDL_sem) -> Uint32;
pub typedef SDL_cond struct {
};
pub extern fn SDL_CreateCond() -> *SDL_cond;
pub extern fn SDL_DestroyCond(cond: *SDL_cond);
pub extern fn SDL_CondSignal(cond: *SDL_cond) -> i32;
pub extern fn SDL_CondBroadcast(cond: *SDL_cond) -> i32;
pub extern fn SDL_CondWait(cond: *SDL_cond, mutex: *SDL_mutex) -> i32;
pub extern fn SDL_CondWaitTimeout(cond: *SDL_cond, mutex: *SDL_mutex, ms: Uint32) -> i32;
pub typedef SDL_Thread struct {
};
pub typedef SDL_threadID u64;
pub typedef SDL_TLSID u32;
pub const SDL_THREAD_PRIORITY_LOW: u32 = 0;
pub const SDL_THREAD_PRIORITY_NORMAL: u32 = 1;
pub const SDL_THREAD_PRIORITY_HIGH: u32 = 2;
pub const SDL_THREAD_PRIORITY_TIME_CRITICAL: u32 = 3;
pub typedef SDL_ThreadPriority u32;
pub typedef SDL_ThreadFunction fn* (_: *void) -> i32;
pub extern fn SDL_CreateThread(fn_: SDL_ThreadFunction, name: *i8, data: *void) -> *SDL_Thread;
pub extern fn SDL_CreateThreadWithStackSize(fn_: SDL_ThreadFunction, name: *i8, stacksize: uint, data: *void) -> *SDL_Thread;
pub extern fn SDL_GetThreadName(thread: *SDL_Thread) -> *i8;
pub extern fn SDL_ThreadID() -> SDL_threadID;
pub extern fn SDL_GetThreadID(thread: *SDL_Thread) -> SDL_threadID;
pub extern fn SDL_SetThreadPriority(priority: SDL_ThreadPriority) -> i32;
pub extern fn SDL_WaitThread(thread: *SDL_Thread, status: *i32);
pub extern fn SDL_DetachThread(thread: *SDL_Thread);
pub extern fn SDL_TLSCreate() -> SDL_TLSID;
pub extern fn SDL_TLSGet(id: SDL_TLSID) -> *void;
pub extern fn SDL_TLSSet(id: SDL_TLSID, value: *void, destructor: fn* (_: *void)) -> i32;
pub typedef SDL_RWops struct {
    size: fn* (_: *struct {}) -> Sint64,
    seek: fn* (_: *struct {}, _: Sint64, _: i32) -> Sint64,
    read: fn* (_: *struct {}, _: *void, _: uint, _: uint) -> uint,
    write: fn* (_: *struct {}, _: *void, _: uint, _: uint) -> uint,
    close: fn* (_: *struct {}) -> i32,
    type: Uint32,
    hidden: union {
        stdio: struct {
            autoclose: SDL_bool,
            fp: *void,
        },
        mem: struct {
            base: *Uint8,
            here: *Uint8,
            stop: *Uint8,
        },
        unknown: struct {
            data1: *void,
            data2: *void,
        },
    },
};
pub extern fn SDL_RWFromFile(file: *i8, mode: *i8) -> *SDL_RWops;
pub extern fn SDL_RWFromFP(fp: *void, autoclose: SDL_bool) -> *SDL_RWops;
pub extern fn SDL_RWFromMem(mem: *void, size: i32) -> *SDL_RWops;
pub extern fn SDL_RWFromConstMem(mem: *void, size: i32) -> *SDL_RWops;
pub extern fn SDL_AllocRW() -> *SDL_RWops;
pub extern fn SDL_FreeRW(area: *SDL_RWops);
pub extern fn SDL_RWsize(context: *SDL_RWops) -> Sint64;
pub extern fn SDL_RWseek(context: *SDL_RWops, offset: Sint64, whence: i32) -> Sint64;
pub extern fn SDL_RWtell(context: *SDL_RWops) -> Sint64;
pub extern fn SDL_RWread(context: *SDL_RWops, ptr: *void, size: uint, maxnum: uint) -> uint;
pub extern fn SDL_RWwrite(context: *SDL_RWops, ptr: *void, size: uint, num: uint) -> uint;
pub extern fn SDL_RWclose(context: *SDL_RWops) -> i32;
pub extern fn SDL_LoadFile_RW(src: *SDL_RWops, datasize: *uint, freesrc: i32) -> *void;
pub extern fn SDL_LoadFile(file: *i8, datasize: *uint) -> *void;
pub extern fn SDL_ReadU8(src: *SDL_RWops) -> Uint8;
pub extern fn SDL_ReadLE16(src: *SDL_RWops) -> Uint16;
pub extern fn SDL_ReadBE16(src: *SDL_RWops) -> Uint16;
pub extern fn SDL_ReadLE32(src: *SDL_RWops) -> Uint32;
pub extern fn SDL_ReadBE32(src: *SDL_RWops) -> Uint32;
pub extern fn SDL_ReadLE64(src: *SDL_RWops) -> Uint64;
pub extern fn SDL_ReadBE64(src: *SDL_RWops) -> Uint64;
pub extern fn SDL_WriteU8(dst: *SDL_RWops, value: Uint8) -> uint;
pub extern fn SDL_WriteLE16(dst: *SDL_RWops, value: Uint16) -> uint;
pub extern fn SDL_WriteBE16(dst: *SDL_RWops, value: Uint16) -> uint;
pub extern fn SDL_WriteLE32(dst: *SDL_RWops, value: Uint32) -> uint;
pub extern fn SDL_WriteBE32(dst: *SDL_RWops, value: Uint32) -> uint;
pub extern fn SDL_WriteLE64(dst: *SDL_RWops, value: Uint64) -> uint;
pub extern fn SDL_WriteBE64(dst: *SDL_RWops, value: Uint64) -> uint;
pub typedef SDL_AudioFormat Uint16;
pub typedef SDL_AudioCallback fn* (_: *void, _: *Uint8, _: i32);
pub typedef SDL_AudioSpec struct {
    freq: i32,
    format: SDL_AudioFormat,
    channels: Uint8,
    silence: Uint8,
    samples: Uint16,
    padding: Uint16,
    size: Uint32,
    callback: SDL_AudioCallback,
    userdata: *void,
};
pub typedef SDL_AudioCVT struct {
    needed: i32,
    src_format: SDL_AudioFormat,
    dst_format: SDL_AudioFormat,
    rate_incr: double,
    buf: *Uint8,
    len: i32,
    len_cvt: i32,
    len_mult: i32,
    len_ratio: double,
    filters: [10]SDL_AudioFilter,
    filter_index: i32,
};
pub typedef SDL_AudioFilter fn* (_: *SDL_AudioCVT, _: SDL_AudioFormat);
pub extern fn SDL_GetNumAudioDrivers() -> i32;
pub extern fn SDL_GetAudioDriver(index: i32) -> *i8;
pub extern fn SDL_AudioInit(driver_name: *i8) -> i32;
pub extern fn SDL_AudioQuit();
pub extern fn SDL_GetCurrentAudioDriver() -> *i8;
pub extern fn SDL_OpenAudio(desired: *SDL_AudioSpec, obtained: *SDL_AudioSpec) -> i32;
pub typedef SDL_AudioDeviceID Uint32;
pub extern fn SDL_GetNumAudioDevices(iscapture: i32) -> i32;
pub extern fn SDL_GetAudioDeviceName(index: i32, iscapture: i32) -> *i8;
pub extern fn SDL_OpenAudioDevice(device: *i8, iscapture: i32, desired: *SDL_AudioSpec, obtained: *SDL_AudioSpec, allowed_changes: i32) -> SDL_AudioDeviceID;
pub const SDL_AUDIO_STOPPED: u32 = 0;
pub const SDL_AUDIO_PLAYING: u32 = 1;
pub const SDL_AUDIO_PAUSED: u32 = 2;
pub typedef SDL_AudioStatus u32;
pub extern fn SDL_GetAudioStatus() -> SDL_AudioStatus;
pub extern fn SDL_GetAudioDeviceStatus(dev: SDL_AudioDeviceID) -> SDL_AudioStatus;
pub extern fn SDL_PauseAudio(pause_on: i32);
pub extern fn SDL_PauseAudioDevice(dev: SDL_AudioDeviceID, pause_on: i32);
pub extern fn SDL_LoadWAV_RW(src: *SDL_RWops, freesrc: i32, spec: *SDL_AudioSpec, audio_buf: **Uint8, audio_len: *Uint32) -> *SDL_AudioSpec;
pub extern fn SDL_FreeWAV(audio_buf: *Uint8);
pub extern fn SDL_BuildAudioCVT(cvt: *SDL_AudioCVT, src_format: SDL_AudioFormat, src_channels: Uint8, src_rate: i32, dst_format: SDL_AudioFormat, dst_channels: Uint8, dst_rate: i32) -> i32;
pub extern fn SDL_ConvertAudio(cvt: *SDL_AudioCVT) -> i32;
pub typedef _SDL_AudioStream struct {
};
pub typedef SDL_AudioStream _SDL_AudioStream;
pub extern fn SDL_NewAudioStream(src_format: SDL_AudioFormat, src_channels: Uint8, src_rate: i32, dst_format: SDL_AudioFormat, dst_channels: Uint8, dst_rate: i32) -> *SDL_AudioStream;
pub extern fn SDL_AudioStreamPut(stream: *SDL_AudioStream, buf: *void, len: i32) -> i32;
pub extern fn SDL_AudioStreamGet(stream: *SDL_AudioStream, buf: *void, len: i32) -> i32;
pub extern fn SDL_AudioStreamAvailable(stream: *SDL_AudioStream) -> i32;
pub extern fn SDL_AudioStreamFlush(stream: *SDL_AudioStream) -> i32;
pub extern fn SDL_AudioStreamClear(stream: *SDL_AudioStream);
pub extern fn SDL_FreeAudioStream(stream: *SDL_AudioStream);
pub extern fn SDL_MixAudio(dst: *Uint8, src: *Uint8, len: Uint32, volume: i32);
pub extern fn SDL_MixAudioFormat(dst: *Uint8, src: *Uint8, format: SDL_AudioFormat, len: Uint32, volume: i32);
pub extern fn SDL_QueueAudio(dev: SDL_AudioDeviceID, data: *void, len: Uint32) -> i32;
pub extern fn SDL_DequeueAudio(dev: SDL_AudioDeviceID, data: *void, len: Uint32) -> Uint32;
pub extern fn SDL_GetQueuedAudioSize(dev: SDL_AudioDeviceID) -> Uint32;
pub extern fn SDL_ClearQueuedAudio(dev: SDL_AudioDeviceID);
pub extern fn SDL_LockAudio();
pub extern fn SDL_LockAudioDevice(dev: SDL_AudioDeviceID);
pub extern fn SDL_UnlockAudio();
pub extern fn SDL_UnlockAudioDevice(dev: SDL_AudioDeviceID);
pub extern fn SDL_CloseAudio();
pub extern fn SDL_CloseAudioDevice(dev: SDL_AudioDeviceID);
pub extern fn SDL_SetClipboardText(text: *i8) -> i32;
pub extern fn SDL_GetClipboardText() -> *i8;
pub extern fn SDL_HasClipboardText() -> SDL_bool;
pub extern fn SDL_GetCPUCount() -> i32;
pub extern fn SDL_GetCPUCacheLineSize() -> i32;
pub extern fn SDL_HasRDTSC() -> SDL_bool;
pub extern fn SDL_HasAltiVec() -> SDL_bool;
pub extern fn SDL_HasMMX() -> SDL_bool;
pub extern fn SDL_Has3DNow() -> SDL_bool;
pub extern fn SDL_HasSSE() -> SDL_bool;
pub extern fn SDL_HasSSE2() -> SDL_bool;
pub extern fn SDL_HasSSE3() -> SDL_bool;
pub extern fn SDL_HasSSE41() -> SDL_bool;
pub extern fn SDL_HasSSE42() -> SDL_bool;
pub extern fn SDL_HasAVX() -> SDL_bool;
pub extern fn SDL_HasAVX2() -> SDL_bool;
pub extern fn SDL_HasAVX512F() -> SDL_bool;
pub extern fn SDL_HasNEON() -> SDL_bool;
pub extern fn SDL_GetSystemRAM() -> i32;
pub extern fn SDL_SIMDGetAlignment() -> uint;
pub extern fn SDL_SIMDAlloc(len: uint) -> *void;
pub extern fn SDL_SIMDFree(ptr: *void);
pub const SDL_PIXELTYPE_UNKNOWN: u32 = 0;
pub const SDL_PIXELTYPE_INDEX1: u32 = 1;
pub const SDL_PIXELTYPE_INDEX4: u32 = 2;
pub const SDL_PIXELTYPE_INDEX8: u32 = 3;
pub const SDL_PIXELTYPE_PACKED8: u32 = 4;
pub const SDL_PIXELTYPE_PACKED16: u32 = 5;
pub const SDL_PIXELTYPE_PACKED32: u32 = 6;
pub const SDL_PIXELTYPE_ARRAYU8: u32 = 7;
pub const SDL_PIXELTYPE_ARRAYU16: u32 = 8;
pub const SDL_PIXELTYPE_ARRAYU32: u32 = 9;
pub const SDL_PIXELTYPE_ARRAYF16: u32 = 10;
pub const SDL_PIXELTYPE_ARRAYF32: u32 = 11;
pub const SDL_BITMAPORDER_NONE: u32 = 0;
pub const SDL_BITMAPORDER_4321: u32 = 1;
pub const SDL_BITMAPORDER_1234: u32 = 2;
pub const SDL_PACKEDORDER_NONE: u32 = 0;
pub const SDL_PACKEDORDER_XRGB: u32 = 1;
pub const SDL_PACKEDORDER_RGBX: u32 = 2;
pub const SDL_PACKEDORDER_ARGB: u32 = 3;
pub const SDL_PACKEDORDER_RGBA: u32 = 4;
pub const SDL_PACKEDORDER_XBGR: u32 = 5;
pub const SDL_PACKEDORDER_BGRX: u32 = 6;
pub const SDL_PACKEDORDER_ABGR: u32 = 7;
pub const SDL_PACKEDORDER_BGRA: u32 = 8;
pub const SDL_ARRAYORDER_NONE: u32 = 0;
pub const SDL_ARRAYORDER_RGB: u32 = 1;
pub const SDL_ARRAYORDER_RGBA: u32 = 2;
pub const SDL_ARRAYORDER_ARGB: u32 = 3;
pub const SDL_ARRAYORDER_BGR: u32 = 4;
pub const SDL_ARRAYORDER_BGRA: u32 = 5;
pub const SDL_ARRAYORDER_ABGR: u32 = 6;
pub const SDL_PACKEDLAYOUT_NONE: u32 = 0;
pub const SDL_PACKEDLAYOUT_332: u32 = 1;
pub const SDL_PACKEDLAYOUT_4444: u32 = 2;
pub const SDL_PACKEDLAYOUT_1555: u32 = 3;
pub const SDL_PACKEDLAYOUT_5551: u32 = 4;
pub const SDL_PACKEDLAYOUT_565: u32 = 5;
pub const SDL_PACKEDLAYOUT_8888: u32 = 6;
pub const SDL_PACKEDLAYOUT_2101010: u32 = 7;
pub const SDL_PACKEDLAYOUT_1010102: u32 = 8;
pub const SDL_PIXELFORMAT_UNKNOWN: u32 = 0;
pub const SDL_PIXELFORMAT_INDEX1LSB: u32 = 286261504;
pub const SDL_PIXELFORMAT_INDEX1MSB: u32 = 287310080;
pub const SDL_PIXELFORMAT_INDEX4LSB: u32 = 303039488;
pub const SDL_PIXELFORMAT_INDEX4MSB: u32 = 304088064;
pub const SDL_PIXELFORMAT_INDEX8: u32 = 318769153;
pub const SDL_PIXELFORMAT_RGB332: u32 = 336660481;
pub const SDL_PIXELFORMAT_RGB444: u32 = 353504258;
pub const SDL_PIXELFORMAT_RGB555: u32 = 353570562;
pub const SDL_PIXELFORMAT_BGR555: u32 = 357764866;
pub const SDL_PIXELFORMAT_ARGB4444: u32 = 355602434;
pub const SDL_PIXELFORMAT_RGBA4444: u32 = 356651010;
pub const SDL_PIXELFORMAT_ABGR4444: u32 = 359796738;
pub const SDL_PIXELFORMAT_BGRA4444: u32 = 360845314;
pub const SDL_PIXELFORMAT_ARGB1555: u32 = 355667970;
pub const SDL_PIXELFORMAT_RGBA5551: u32 = 356782082;
pub const SDL_PIXELFORMAT_ABGR1555: u32 = 359862274;
pub const SDL_PIXELFORMAT_BGRA5551: u32 = 360976386;
pub const SDL_PIXELFORMAT_RGB565: u32 = 353701890;
pub const SDL_PIXELFORMAT_BGR565: u32 = 357896194;
pub const SDL_PIXELFORMAT_RGB24: u32 = 386930691;
pub const SDL_PIXELFORMAT_BGR24: u32 = 390076419;
pub const SDL_PIXELFORMAT_RGB888: u32 = 370546692;
pub const SDL_PIXELFORMAT_RGBX8888: u32 = 371595268;
pub const SDL_PIXELFORMAT_BGR888: u32 = 374740996;
pub const SDL_PIXELFORMAT_BGRX8888: u32 = 375789572;
pub const SDL_PIXELFORMAT_ARGB8888: u32 = 372645892;
pub const SDL_PIXELFORMAT_RGBA8888: u32 = 373694468;
pub const SDL_PIXELFORMAT_ABGR8888: u32 = 376840196;
pub const SDL_PIXELFORMAT_BGRA8888: u32 = 377888772;
pub const SDL_PIXELFORMAT_ARGB2101010: u32 = 372711428;
pub const SDL_PIXELFORMAT_RGBA32: u32 = 376840196;
pub const SDL_PIXELFORMAT_ARGB32: u32 = 377888772;
pub const SDL_PIXELFORMAT_BGRA32: u32 = 372645892;
pub const SDL_PIXELFORMAT_ABGR32: u32 = 373694468;
pub const SDL_PIXELFORMAT_YV12: u32 = 842094169;
pub const SDL_PIXELFORMAT_IYUV: u32 = 1448433993;
pub const SDL_PIXELFORMAT_YUY2: u32 = 844715353;
pub const SDL_PIXELFORMAT_UYVY: u32 = 1498831189;
pub const SDL_PIXELFORMAT_YVYU: u32 = 1431918169;
pub const SDL_PIXELFORMAT_NV12: u32 = 842094158;
pub const SDL_PIXELFORMAT_NV21: u32 = 825382478;
pub const SDL_PIXELFORMAT_EXTERNAL_OES: u32 = 542328143;
pub typedef SDL_PixelFormatEnum u32;
pub typedef SDL_Color struct {
    r: Uint8,
    g: Uint8,
    b: Uint8,
    a: Uint8,
};
pub typedef SDL_Palette struct {
    ncolors: i32,
    colors: *SDL_Color,
    version_: Uint32,
    refcount: i32,
};
pub typedef SDL_PixelFormat struct {
    format: Uint32,
    palette: *SDL_Palette,
    BitsPerPixel: Uint8,
    BytesPerPixel: Uint8,
    padding: [2]Uint8,
    Rmask: Uint32,
    Gmask: Uint32,
    Bmask: Uint32,
    Amask: Uint32,
    Rloss: Uint8,
    Gloss: Uint8,
    Bloss: Uint8,
    Aloss: Uint8,
    Rshift: Uint8,
    Gshift: Uint8,
    Bshift: Uint8,
    Ashift: Uint8,
    refcount: i32,
    next: *struct {},
};
pub extern fn SDL_GetPixelFormatName(format: Uint32) -> *i8;
pub extern fn SDL_PixelFormatEnumToMasks(format: Uint32, bpp: *i32, Rmask: *Uint32, Gmask: *Uint32, Bmask: *Uint32, Amask: *Uint32) -> SDL_bool;
pub extern fn SDL_MasksToPixelFormatEnum(bpp: i32, Rmask: Uint32, Gmask: Uint32, Bmask: Uint32, Amask: Uint32) -> Uint32;
pub extern fn SDL_AllocFormat(pixel_format: Uint32) -> *SDL_PixelFormat;
pub extern fn SDL_FreeFormat(format: *SDL_PixelFormat);
pub extern fn SDL_AllocPalette(ncolors: i32) -> *SDL_Palette;
pub extern fn SDL_SetPixelFormatPalette(format: *SDL_PixelFormat, palette: *SDL_Palette) -> i32;
pub extern fn SDL_SetPaletteColors(palette: *SDL_Palette, colors: *SDL_Color, firstcolor: i32, ncolors: i32) -> i32;
pub extern fn SDL_FreePalette(palette: *SDL_Palette);
pub extern fn SDL_MapRGB(format: *SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8) -> Uint32;
pub extern fn SDL_MapRGBA(format: *SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8, a: Uint8) -> Uint32;
pub extern fn SDL_GetRGB(pixel: Uint32, format: *SDL_PixelFormat, r: *Uint8, g: *Uint8, b: *Uint8);
pub extern fn SDL_GetRGBA(pixel: Uint32, format: *SDL_PixelFormat, r: *Uint8, g: *Uint8, b: *Uint8, a: *Uint8);
pub extern fn SDL_CalculateGammaRamp(gamma: float, ramp: *Uint16);
pub typedef SDL_Point struct {
    x: i32,
    y: i32,
};
pub typedef SDL_FPoint struct {
    x: float,
    y: float,
};
pub typedef SDL_Rect struct {
    x: i32,
    y: i32,
    w: i32,
    h: i32,
};
pub typedef SDL_FRect struct {
    x: float,
    y: float,
    w: float,
    h: float,
};
pub extern fn SDL_PointInRect(p: *SDL_Point, r: *SDL_Rect) -> SDL_bool;
pub extern fn SDL_RectEmpty(r: *SDL_Rect) -> SDL_bool;
pub extern fn SDL_RectEquals(a: *SDL_Rect, b: *SDL_Rect) -> SDL_bool;
pub extern fn SDL_HasIntersection(A: *SDL_Rect, B: *SDL_Rect) -> SDL_bool;
pub extern fn SDL_IntersectRect(A: *SDL_Rect, B: *SDL_Rect, result: *SDL_Rect) -> SDL_bool;
pub extern fn SDL_UnionRect(A: *SDL_Rect, B: *SDL_Rect, result: *SDL_Rect);
pub extern fn SDL_EnclosePoints(points: *SDL_Point, count: i32, clip: *SDL_Rect, result: *SDL_Rect) -> SDL_bool;
pub extern fn SDL_IntersectRectAndLine(rect: *SDL_Rect, X1: *i32, Y1: *i32, X2: *i32, Y2: *i32) -> SDL_bool;
pub const SDL_BLENDMODE_NONE: u32 = 0;
pub const SDL_BLENDMODE_BLEND: u32 = 1;
pub const SDL_BLENDMODE_ADD: u32 = 2;
pub const SDL_BLENDMODE_MOD: u32 = 4;
pub const SDL_BLENDMODE_INVALID: u32 = 2147483647;
pub typedef SDL_BlendMode u32;
pub const SDL_BLENDOPERATION_ADD: u32 = 1;
pub const SDL_BLENDOPERATION_SUBTRACT: u32 = 2;
pub const SDL_BLENDOPERATION_REV_SUBTRACT: u32 = 3;
pub const SDL_BLENDOPERATION_MINIMUM: u32 = 4;
pub const SDL_BLENDOPERATION_MAXIMUM: u32 = 5;
pub typedef SDL_BlendOperation u32;
pub const SDL_BLENDFACTOR_ZERO: u32 = 1;
pub const SDL_BLENDFACTOR_ONE: u32 = 2;
pub const SDL_BLENDFACTOR_SRC_COLOR: u32 = 3;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR: u32 = 4;
pub const SDL_BLENDFACTOR_SRC_ALPHA: u32 = 5;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: u32 = 6;
pub const SDL_BLENDFACTOR_DST_COLOR: u32 = 7;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR: u32 = 8;
pub const SDL_BLENDFACTOR_DST_ALPHA: u32 = 9;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA: u32 = 10;
pub typedef SDL_BlendFactor u32;
pub extern fn SDL_ComposeCustomBlendMode(srcColorFactor: SDL_BlendFactor, dstColorFactor: SDL_BlendFactor, colorOperation: SDL_BlendOperation, srcAlphaFactor: SDL_BlendFactor, dstAlphaFactor: SDL_BlendFactor, alphaOperation: SDL_BlendOperation) -> SDL_BlendMode;
pub typedef SDL_Surface struct {
    flags: Uint32,
    format: *SDL_PixelFormat,
    w: i32,
    h: i32,
    pitch: i32,
    pixels: *void,
    userdata: *void,
    locked: i32,
    lock_data: *void,
    clip_rect: SDL_Rect,
    map: *struct {},
    refcount: i32,
};
pub typedef SDL_blit fn* (_: *SDL_Surface, _: *SDL_Rect, _: *SDL_Surface, _: *SDL_Rect) -> i32;
pub const SDL_YUV_CONVERSION_JPEG: u32 = 0;
pub const SDL_YUV_CONVERSION_BT601: u32 = 1;
pub const SDL_YUV_CONVERSION_BT709: u32 = 2;
pub const SDL_YUV_CONVERSION_AUTOMATIC: u32 = 3;
pub typedef SDL_YUV_CONVERSION_MODE u32;
pub extern fn SDL_CreateRGBSurface(flags: Uint32, width: i32, height: i32, depth: i32, Rmask: Uint32, Gmask: Uint32, Bmask: Uint32, Amask: Uint32) -> *SDL_Surface;
pub extern fn SDL_CreateRGBSurfaceWithFormat(flags: Uint32, width: i32, height: i32, depth: i32, format: Uint32) -> *SDL_Surface;
pub extern fn SDL_CreateRGBSurfaceFrom(pixels: *void, width: i32, height: i32, depth: i32, pitch: i32, Rmask: Uint32, Gmask: Uint32, Bmask: Uint32, Amask: Uint32) -> *SDL_Surface;
pub extern fn SDL_CreateRGBSurfaceWithFormatFrom(pixels: *void, width: i32, height: i32, depth: i32, pitch: i32, format: Uint32) -> *SDL_Surface;
pub extern fn SDL_FreeSurface(surface: *SDL_Surface);
pub extern fn SDL_SetSurfacePalette(surface: *SDL_Surface, palette: *SDL_Palette) -> i32;
pub extern fn SDL_LockSurface(surface: *SDL_Surface) -> i32;
pub extern fn SDL_UnlockSurface(surface: *SDL_Surface);
pub extern fn SDL_LoadBMP_RW(src: *SDL_RWops, freesrc: i32) -> *SDL_Surface;
pub extern fn SDL_SaveBMP_RW(surface: *SDL_Surface, dst: *SDL_RWops, freedst: i32) -> i32;
pub extern fn SDL_SetSurfaceRLE(surface: *SDL_Surface, flag: i32) -> i32;
pub extern fn SDL_SetColorKey(surface: *SDL_Surface, flag: i32, key: Uint32) -> i32;
pub extern fn SDL_HasColorKey(surface: *SDL_Surface) -> SDL_bool;
pub extern fn SDL_GetColorKey(surface: *SDL_Surface, key: *Uint32) -> i32;
pub extern fn SDL_SetSurfaceColorMod(surface: *SDL_Surface, r: Uint8, g: Uint8, b: Uint8) -> i32;
pub extern fn SDL_GetSurfaceColorMod(surface: *SDL_Surface, r: *Uint8, g: *Uint8, b: *Uint8) -> i32;
pub extern fn SDL_SetSurfaceAlphaMod(surface: *SDL_Surface, alpha: Uint8) -> i32;
pub extern fn SDL_GetSurfaceAlphaMod(surface: *SDL_Surface, alpha: *Uint8) -> i32;
pub extern fn SDL_SetSurfaceBlendMode(surface: *SDL_Surface, blendMode: SDL_BlendMode) -> i32;
pub extern fn SDL_GetSurfaceBlendMode(surface: *SDL_Surface, blendMode: *SDL_BlendMode) -> i32;
pub extern fn SDL_SetClipRect(surface: *SDL_Surface, rect: *SDL_Rect) -> SDL_bool;
pub extern fn SDL_GetClipRect(surface: *SDL_Surface, rect: *SDL_Rect);
pub extern fn SDL_DuplicateSurface(surface: *SDL_Surface) -> *SDL_Surface;
pub extern fn SDL_ConvertSurface(src: *SDL_Surface, fmt: *SDL_PixelFormat, flags: Uint32) -> *SDL_Surface;
pub extern fn SDL_ConvertSurfaceFormat(src: *SDL_Surface, pixel_format: Uint32, flags: Uint32) -> *SDL_Surface;
pub extern fn SDL_ConvertPixels(width: i32, height: i32, src_format: Uint32, src: *void, src_pitch: i32, dst_format: Uint32, dst: *void, dst_pitch: i32) -> i32;
pub extern fn SDL_FillRect(dst: *SDL_Surface, rect: *SDL_Rect, color: Uint32) -> i32;
pub extern fn SDL_FillRects(dst: *SDL_Surface, rects: *SDL_Rect, count: i32, color: Uint32) -> i32;
pub extern fn SDL_UpperBlit(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect) -> i32;
pub extern fn SDL_LowerBlit(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect) -> i32;
pub extern fn SDL_SoftStretch(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect) -> i32;
pub extern fn SDL_UpperBlitScaled(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect) -> i32;
pub extern fn SDL_LowerBlitScaled(src: *SDL_Surface, srcrect: *SDL_Rect, dst: *SDL_Surface, dstrect: *SDL_Rect) -> i32;
pub extern fn SDL_SetYUVConversionMode(mode: SDL_YUV_CONVERSION_MODE);
pub extern fn SDL_GetYUVConversionMode() -> SDL_YUV_CONVERSION_MODE;
pub extern fn SDL_GetYUVConversionModeForResolution(width: i32, height: i32) -> SDL_YUV_CONVERSION_MODE;
pub typedef SDL_DisplayMode struct {
    format: Uint32,
    w: i32,
    h: i32,
    refresh_rate: i32,
    driverdata: *void,
};
pub typedef SDL_Window struct {
};
pub const SDL_WINDOW_FULLSCREEN: u32 = 1;
pub const SDL_WINDOW_OPENGL: u32 = 2;
pub const SDL_WINDOW_SHOWN: u32 = 4;
pub const SDL_WINDOW_HIDDEN: u32 = 8;
pub const SDL_WINDOW_BORDERLESS: u32 = 16;
pub const SDL_WINDOW_RESIZABLE: u32 = 32;
pub const SDL_WINDOW_MINIMIZED: u32 = 64;
pub const SDL_WINDOW_MAXIMIZED: u32 = 128;
pub const SDL_WINDOW_INPUT_GRABBED: u32 = 256;
pub const SDL_WINDOW_INPUT_FOCUS: u32 = 512;
pub const SDL_WINDOW_MOUSE_FOCUS: u32 = 1024;
pub const SDL_WINDOW_FULLSCREEN_DESKTOP: u32 = 4097;
pub const SDL_WINDOW_FOREIGN: u32 = 2048;
pub const SDL_WINDOW_ALLOW_HIGHDPI: u32 = 8192;
pub const SDL_WINDOW_MOUSE_CAPTURE: u32 = 16384;
pub const SDL_WINDOW_ALWAYS_ON_TOP: u32 = 32768;
pub const SDL_WINDOW_SKIP_TASKBAR: u32 = 65536;
pub const SDL_WINDOW_UTILITY: u32 = 131072;
pub const SDL_WINDOW_TOOLTIP: u32 = 262144;
pub const SDL_WINDOW_POPUP_MENU: u32 = 524288;
pub const SDL_WINDOW_VULKAN: u32 = 268435456;
pub typedef SDL_WindowFlags u32;
pub const SDL_WINDOWEVENT_NONE: u32 = 0;
pub const SDL_WINDOWEVENT_SHOWN: u32 = 1;
pub const SDL_WINDOWEVENT_HIDDEN: u32 = 2;
pub const SDL_WINDOWEVENT_EXPOSED: u32 = 3;
pub const SDL_WINDOWEVENT_MOVED: u32 = 4;
pub const SDL_WINDOWEVENT_RESIZED: u32 = 5;
pub const SDL_WINDOWEVENT_SIZE_CHANGED: u32 = 6;
pub const SDL_WINDOWEVENT_MINIMIZED: u32 = 7;
pub const SDL_WINDOWEVENT_MAXIMIZED: u32 = 8;
pub const SDL_WINDOWEVENT_RESTORED: u32 = 9;
pub const SDL_WINDOWEVENT_ENTER: u32 = 10;
pub const SDL_WINDOWEVENT_LEAVE: u32 = 11;
pub const SDL_WINDOWEVENT_FOCUS_GAINED: u32 = 12;
pub const SDL_WINDOWEVENT_FOCUS_LOST: u32 = 13;
pub const SDL_WINDOWEVENT_CLOSE: u32 = 14;
pub const SDL_WINDOWEVENT_TAKE_FOCUS: u32 = 15;
pub const SDL_WINDOWEVENT_HIT_TEST: u32 = 16;
pub typedef SDL_WindowEventID u32;
pub const SDL_DISPLAYEVENT_NONE: u32 = 0;
pub const SDL_DISPLAYEVENT_ORIENTATION: u32 = 1;
pub typedef SDL_DisplayEventID u32;
pub const SDL_ORIENTATION_UNKNOWN: u32 = 0;
pub const SDL_ORIENTATION_LANDSCAPE: u32 = 1;
pub const SDL_ORIENTATION_LANDSCAPE_FLIPPED: u32 = 2;
pub const SDL_ORIENTATION_PORTRAIT: u32 = 3;
pub const SDL_ORIENTATION_PORTRAIT_FLIPPED: u32 = 4;
pub typedef SDL_DisplayOrientation u32;
pub typedef SDL_GLContext *void;
pub const SDL_GL_RED_SIZE: u32 = 0;
pub const SDL_GL_GREEN_SIZE: u32 = 1;
pub const SDL_GL_BLUE_SIZE: u32 = 2;
pub const SDL_GL_ALPHA_SIZE: u32 = 3;
pub const SDL_GL_BUFFER_SIZE: u32 = 4;
pub const SDL_GL_DOUBLEBUFFER: u32 = 5;
pub const SDL_GL_DEPTH_SIZE: u32 = 6;
pub const SDL_GL_STENCIL_SIZE: u32 = 7;
pub const SDL_GL_ACCUM_RED_SIZE: u32 = 8;
pub const SDL_GL_ACCUM_GREEN_SIZE: u32 = 9;
pub const SDL_GL_ACCUM_BLUE_SIZE: u32 = 10;
pub const SDL_GL_ACCUM_ALPHA_SIZE: u32 = 11;
pub const SDL_GL_STEREO: u32 = 12;
pub const SDL_GL_MULTISAMPLEBUFFERS: u32 = 13;
pub const SDL_GL_MULTISAMPLESAMPLES: u32 = 14;
pub const SDL_GL_ACCELERATED_VISUAL: u32 = 15;
pub const SDL_GL_RETAINED_BACKING: u32 = 16;
pub const SDL_GL_CONTEXT_MAJOR_VERSION: u32 = 17;
pub const SDL_GL_CONTEXT_MINOR_VERSION: u32 = 18;
pub const SDL_GL_CONTEXT_EGL: u32 = 19;
pub const SDL_GL_CONTEXT_FLAGS: u32 = 20;
pub const SDL_GL_CONTEXT_PROFILE_MASK: u32 = 21;
pub const SDL_GL_SHARE_WITH_CURRENT_CONTEXT: u32 = 22;
pub const SDL_GL_FRAMEBUFFER_SRGB_CAPABLE: u32 = 23;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR: u32 = 24;
pub const SDL_GL_CONTEXT_RESET_NOTIFICATION: u32 = 25;
pub const SDL_GL_CONTEXT_NO_ERROR: u32 = 26;
pub typedef SDL_GLattr u32;
pub const SDL_GL_CONTEXT_PROFILE_CORE: u32 = 1;
pub const SDL_GL_CONTEXT_PROFILE_COMPATIBILITY: u32 = 2;
pub const SDL_GL_CONTEXT_PROFILE_ES: u32 = 4;
pub typedef SDL_GLprofile u32;
pub const SDL_GL_CONTEXT_DEBUG_FLAG: u32 = 1;
pub const SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: u32 = 2;
pub const SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG: u32 = 4;
pub const SDL_GL_CONTEXT_RESET_ISOLATION_FLAG: u32 = 8;
pub typedef SDL_GLcontextFlag u32;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE: u32 = 0;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: u32 = 1;
pub typedef SDL_GLcontextReleaseFlag u32;
pub const SDL_GL_CONTEXT_RESET_NO_NOTIFICATION: u32 = 0;
pub const SDL_GL_CONTEXT_RESET_LOSE_CONTEXT: u32 = 1;
pub typedef SDL_GLContextResetNotification u32;
pub extern fn SDL_GetNumVideoDrivers() -> i32;
pub extern fn SDL_GetVideoDriver(index: i32) -> *i8;
pub extern fn SDL_VideoInit(driver_name: *i8) -> i32;
pub extern fn SDL_VideoQuit();
pub extern fn SDL_GetCurrentVideoDriver() -> *i8;
pub extern fn SDL_GetNumVideoDisplays() -> i32;
pub extern fn SDL_GetDisplayName(displayIndex: i32) -> *i8;
pub extern fn SDL_GetDisplayBounds(displayIndex: i32, rect: *SDL_Rect) -> i32;
pub extern fn SDL_GetDisplayUsableBounds(displayIndex: i32, rect: *SDL_Rect) -> i32;
pub extern fn SDL_GetDisplayDPI(displayIndex: i32, ddpi: *float, hdpi: *float, vdpi: *float) -> i32;
pub extern fn SDL_GetDisplayOrientation(displayIndex: i32) -> SDL_DisplayOrientation;
pub extern fn SDL_GetNumDisplayModes(displayIndex: i32) -> i32;
pub extern fn SDL_GetDisplayMode(displayIndex: i32, modeIndex: i32, mode: *SDL_DisplayMode) -> i32;
pub extern fn SDL_GetDesktopDisplayMode(displayIndex: i32, mode: *SDL_DisplayMode) -> i32;
pub extern fn SDL_GetCurrentDisplayMode(displayIndex: i32, mode: *SDL_DisplayMode) -> i32;
pub extern fn SDL_GetClosestDisplayMode(displayIndex: i32, mode: *SDL_DisplayMode, closest: *SDL_DisplayMode) -> *SDL_DisplayMode;
pub extern fn SDL_GetWindowDisplayIndex(window: *SDL_Window) -> i32;
pub extern fn SDL_SetWindowDisplayMode(window: *SDL_Window, mode: *SDL_DisplayMode) -> i32;
pub extern fn SDL_GetWindowDisplayMode(window: *SDL_Window, mode: *SDL_DisplayMode) -> i32;
pub extern fn SDL_GetWindowPixelFormat(window: *SDL_Window) -> Uint32;
pub extern fn SDL_CreateWindow(title: *i8, x: i32, y: i32, w: i32, h: i32, flags: Uint32) -> *SDL_Window;
pub extern fn SDL_CreateWindowFrom(data: *void) -> *SDL_Window;
pub extern fn SDL_GetWindowID(window: *SDL_Window) -> Uint32;
pub extern fn SDL_GetWindowFromID(id: Uint32) -> *SDL_Window;
pub extern fn SDL_GetWindowFlags(window: *SDL_Window) -> Uint32;
pub extern fn SDL_SetWindowTitle(window: *SDL_Window, title: *i8);
pub extern fn SDL_GetWindowTitle(window: *SDL_Window) -> *i8;
pub extern fn SDL_SetWindowIcon(window: *SDL_Window, icon: *SDL_Surface);
pub extern fn SDL_SetWindowData(window: *SDL_Window, name: *i8, userdata: *void) -> *void;
pub extern fn SDL_GetWindowData(window: *SDL_Window, name: *i8) -> *void;
pub extern fn SDL_SetWindowPosition(window: *SDL_Window, x: i32, y: i32);
pub extern fn SDL_GetWindowPosition(window: *SDL_Window, x: *i32, y: *i32);
pub extern fn SDL_SetWindowSize(window: *SDL_Window, w: i32, h: i32);
pub extern fn SDL_GetWindowSize(window: *SDL_Window, w: *i32, h: *i32);
pub extern fn SDL_GetWindowBordersSize(window: *SDL_Window, top: *i32, left: *i32, bottom: *i32, right: *i32) -> i32;
pub extern fn SDL_SetWindowMinimumSize(window: *SDL_Window, min_w: i32, min_h: i32);
pub extern fn SDL_GetWindowMinimumSize(window: *SDL_Window, w: *i32, h: *i32);
pub extern fn SDL_SetWindowMaximumSize(window: *SDL_Window, max_w: i32, max_h: i32);
pub extern fn SDL_GetWindowMaximumSize(window: *SDL_Window, w: *i32, h: *i32);
pub extern fn SDL_SetWindowBordered(window: *SDL_Window, bordered: SDL_bool);
pub extern fn SDL_SetWindowResizable(window: *SDL_Window, resizable: SDL_bool);
pub extern fn SDL_ShowWindow(window: *SDL_Window);
pub extern fn SDL_HideWindow(window: *SDL_Window);
pub extern fn SDL_RaiseWindow(window: *SDL_Window);
pub extern fn SDL_MaximizeWindow(window: *SDL_Window);
pub extern fn SDL_MinimizeWindow(window: *SDL_Window);
pub extern fn SDL_RestoreWindow(window: *SDL_Window);
pub extern fn SDL_SetWindowFullscreen(window: *SDL_Window, flags: Uint32) -> i32;
pub extern fn SDL_GetWindowSurface(window: *SDL_Window) -> *SDL_Surface;
pub extern fn SDL_UpdateWindowSurface(window: *SDL_Window) -> i32;
pub extern fn SDL_UpdateWindowSurfaceRects(window: *SDL_Window, rects: *SDL_Rect, numrects: i32) -> i32;
pub extern fn SDL_SetWindowGrab(window: *SDL_Window, grabbed: SDL_bool);
pub extern fn SDL_GetWindowGrab(window: *SDL_Window) -> SDL_bool;
pub extern fn SDL_GetGrabbedWindow() -> *SDL_Window;
pub extern fn SDL_SetWindowBrightness(window: *SDL_Window, brightness: float) -> i32;
pub extern fn SDL_GetWindowBrightness(window: *SDL_Window) -> float;
pub extern fn SDL_SetWindowOpacity(window: *SDL_Window, opacity: float) -> i32;
pub extern fn SDL_GetWindowOpacity(window: *SDL_Window, out_opacity: *float) -> i32;
pub extern fn SDL_SetWindowModalFor(modal_window: *SDL_Window, parent_window: *SDL_Window) -> i32;
pub extern fn SDL_SetWindowInputFocus(window: *SDL_Window) -> i32;
pub extern fn SDL_SetWindowGammaRamp(window: *SDL_Window, red: *Uint16, green: *Uint16, blue: *Uint16) -> i32;
pub extern fn SDL_GetWindowGammaRamp(window: *SDL_Window, red: *Uint16, green: *Uint16, blue: *Uint16) -> i32;
pub const SDL_HITTEST_NORMAL: u32 = 0;
pub const SDL_HITTEST_DRAGGABLE: u32 = 1;
pub const SDL_HITTEST_RESIZE_TOPLEFT: u32 = 2;
pub const SDL_HITTEST_RESIZE_TOP: u32 = 3;
pub const SDL_HITTEST_RESIZE_TOPRIGHT: u32 = 4;
pub const SDL_HITTEST_RESIZE_RIGHT: u32 = 5;
pub const SDL_HITTEST_RESIZE_BOTTOMRIGHT: u32 = 6;
pub const SDL_HITTEST_RESIZE_BOTTOM: u32 = 7;
pub const SDL_HITTEST_RESIZE_BOTTOMLEFT: u32 = 8;
pub const SDL_HITTEST_RESIZE_LEFT: u32 = 9;
pub typedef SDL_HitTestResult u32;
pub typedef SDL_HitTest fn* (_: *SDL_Window, _: *SDL_Point, _: *void) -> SDL_HitTestResult;
pub extern fn SDL_SetWindowHitTest(window: *SDL_Window, callback: SDL_HitTest, callback_data: *void) -> i32;
pub extern fn SDL_DestroyWindow(window: *SDL_Window);
pub extern fn SDL_IsScreenSaverEnabled() -> SDL_bool;
pub extern fn SDL_EnableScreenSaver();
pub extern fn SDL_DisableScreenSaver();
pub extern fn SDL_GL_LoadLibrary(path: *i8) -> i32;
pub extern fn SDL_GL_GetProcAddress(proc: *i8) -> *void;
pub extern fn SDL_GL_UnloadLibrary();
pub extern fn SDL_GL_ExtensionSupported(extension: *i8) -> SDL_bool;
pub extern fn SDL_GL_ResetAttributes();
pub extern fn SDL_GL_SetAttribute(attr: SDL_GLattr, value: i32) -> i32;
pub extern fn SDL_GL_GetAttribute(attr: SDL_GLattr, value: *i32) -> i32;
pub extern fn SDL_GL_CreateContext(window: *SDL_Window) -> SDL_GLContext;
pub extern fn SDL_GL_MakeCurrent(window: *SDL_Window, context: SDL_GLContext) -> i32;
pub extern fn SDL_GL_GetCurrentWindow() -> *SDL_Window;
pub extern fn SDL_GL_GetCurrentContext() -> SDL_GLContext;
pub extern fn SDL_GL_GetDrawableSize(window: *SDL_Window, w: *i32, h: *i32);
pub extern fn SDL_GL_SetSwapInterval(interval: i32) -> i32;
pub extern fn SDL_GL_GetSwapInterval() -> i32;
pub extern fn SDL_GL_SwapWindow(window: *SDL_Window);
pub extern fn SDL_GL_DeleteContext(context: SDL_GLContext);
pub const SDL_SCANCODE_UNKNOWN: u32 = 0;
pub const SDL_SCANCODE_A: u32 = 4;
pub const SDL_SCANCODE_B: u32 = 5;
pub const SDL_SCANCODE_C: u32 = 6;
pub const SDL_SCANCODE_D: u32 = 7;
pub const SDL_SCANCODE_E: u32 = 8;
pub const SDL_SCANCODE_F: u32 = 9;
pub const SDL_SCANCODE_G: u32 = 10;
pub const SDL_SCANCODE_H: u32 = 11;
pub const SDL_SCANCODE_I: u32 = 12;
pub const SDL_SCANCODE_J: u32 = 13;
pub const SDL_SCANCODE_K: u32 = 14;
pub const SDL_SCANCODE_L: u32 = 15;
pub const SDL_SCANCODE_M: u32 = 16;
pub const SDL_SCANCODE_N: u32 = 17;
pub const SDL_SCANCODE_O: u32 = 18;
pub const SDL_SCANCODE_P: u32 = 19;
pub const SDL_SCANCODE_Q: u32 = 20;
pub const SDL_SCANCODE_R: u32 = 21;
pub const SDL_SCANCODE_S: u32 = 22;
pub const SDL_SCANCODE_T: u32 = 23;
pub const SDL_SCANCODE_U: u32 = 24;
pub const SDL_SCANCODE_V: u32 = 25;
pub const SDL_SCANCODE_W: u32 = 26;
pub const SDL_SCANCODE_X: u32 = 27;
pub const SDL_SCANCODE_Y: u32 = 28;
pub const SDL_SCANCODE_Z: u32 = 29;
pub const SDL_SCANCODE_1: u32 = 30;
pub const SDL_SCANCODE_2: u32 = 31;
pub const SDL_SCANCODE_3: u32 = 32;
pub const SDL_SCANCODE_4: u32 = 33;
pub const SDL_SCANCODE_5: u32 = 34;
pub const SDL_SCANCODE_6: u32 = 35;
pub const SDL_SCANCODE_7: u32 = 36;
pub const SDL_SCANCODE_8: u32 = 37;
pub const SDL_SCANCODE_9: u32 = 38;
pub const SDL_SCANCODE_0: u32 = 39;
pub const SDL_SCANCODE_RETURN: u32 = 40;
pub const SDL_SCANCODE_ESCAPE: u32 = 41;
pub const SDL_SCANCODE_BACKSPACE: u32 = 42;
pub const SDL_SCANCODE_TAB: u32 = 43;
pub const SDL_SCANCODE_SPACE: u32 = 44;
pub const SDL_SCANCODE_MINUS: u32 = 45;
pub const SDL_SCANCODE_EQUALS: u32 = 46;
pub const SDL_SCANCODE_LEFTBRACKET: u32 = 47;
pub const SDL_SCANCODE_RIGHTBRACKET: u32 = 48;
pub const SDL_SCANCODE_BACKSLASH: u32 = 49;
pub const SDL_SCANCODE_NONUSHASH: u32 = 50;
pub const SDL_SCANCODE_SEMICOLON: u32 = 51;
pub const SDL_SCANCODE_APOSTROPHE: u32 = 52;
pub const SDL_SCANCODE_GRAVE: u32 = 53;
pub const SDL_SCANCODE_COMMA: u32 = 54;
pub const SDL_SCANCODE_PERIOD: u32 = 55;
pub const SDL_SCANCODE_SLASH: u32 = 56;
pub const SDL_SCANCODE_CAPSLOCK: u32 = 57;
pub const SDL_SCANCODE_F1: u32 = 58;
pub const SDL_SCANCODE_F2: u32 = 59;
pub const SDL_SCANCODE_F3: u32 = 60;
pub const SDL_SCANCODE_F4: u32 = 61;
pub const SDL_SCANCODE_F5: u32 = 62;
pub const SDL_SCANCODE_F6: u32 = 63;
pub const SDL_SCANCODE_F7: u32 = 64;
pub const SDL_SCANCODE_F8: u32 = 65;
pub const SDL_SCANCODE_F9: u32 = 66;
pub const SDL_SCANCODE_F10: u32 = 67;
pub const SDL_SCANCODE_F11: u32 = 68;
pub const SDL_SCANCODE_F12: u32 = 69;
pub const SDL_SCANCODE_PRINTSCREEN: u32 = 70;
pub const SDL_SCANCODE_SCROLLLOCK: u32 = 71;
pub const SDL_SCANCODE_PAUSE: u32 = 72;
pub const SDL_SCANCODE_INSERT: u32 = 73;
pub const SDL_SCANCODE_HOME: u32 = 74;
pub const SDL_SCANCODE_PAGEUP: u32 = 75;
pub const SDL_SCANCODE_DELETE: u32 = 76;
pub const SDL_SCANCODE_END: u32 = 77;
pub const SDL_SCANCODE_PAGEDOWN: u32 = 78;
pub const SDL_SCANCODE_RIGHT: u32 = 79;
pub const SDL_SCANCODE_LEFT: u32 = 80;
pub const SDL_SCANCODE_DOWN: u32 = 81;
pub const SDL_SCANCODE_UP: u32 = 82;
pub const SDL_SCANCODE_NUMLOCKCLEAR: u32 = 83;
pub const SDL_SCANCODE_KP_DIVIDE: u32 = 84;
pub const SDL_SCANCODE_KP_MULTIPLY: u32 = 85;
pub const SDL_SCANCODE_KP_MINUS: u32 = 86;
pub const SDL_SCANCODE_KP_PLUS: u32 = 87;
pub const SDL_SCANCODE_KP_ENTER: u32 = 88;
pub const SDL_SCANCODE_KP_1: u32 = 89;
pub const SDL_SCANCODE_KP_2: u32 = 90;
pub const SDL_SCANCODE_KP_3: u32 = 91;
pub const SDL_SCANCODE_KP_4: u32 = 92;
pub const SDL_SCANCODE_KP_5: u32 = 93;
pub const SDL_SCANCODE_KP_6: u32 = 94;
pub const SDL_SCANCODE_KP_7: u32 = 95;
pub const SDL_SCANCODE_KP_8: u32 = 96;
pub const SDL_SCANCODE_KP_9: u32 = 97;
pub const SDL_SCANCODE_KP_0: u32 = 98;
pub const SDL_SCANCODE_KP_PERIOD: u32 = 99;
pub const SDL_SCANCODE_NONUSBACKSLASH: u32 = 100;
pub const SDL_SCANCODE_APPLICATION: u32 = 101;
pub const SDL_SCANCODE_POWER: u32 = 102;
pub const SDL_SCANCODE_KP_EQUALS: u32 = 103;
pub const SDL_SCANCODE_F13: u32 = 104;
pub const SDL_SCANCODE_F14: u32 = 105;
pub const SDL_SCANCODE_F15: u32 = 106;
pub const SDL_SCANCODE_F16: u32 = 107;
pub const SDL_SCANCODE_F17: u32 = 108;
pub const SDL_SCANCODE_F18: u32 = 109;
pub const SDL_SCANCODE_F19: u32 = 110;
pub const SDL_SCANCODE_F20: u32 = 111;
pub const SDL_SCANCODE_F21: u32 = 112;
pub const SDL_SCANCODE_F22: u32 = 113;
pub const SDL_SCANCODE_F23: u32 = 114;
pub const SDL_SCANCODE_F24: u32 = 115;
pub const SDL_SCANCODE_EXECUTE: u32 = 116;
pub const SDL_SCANCODE_HELP: u32 = 117;
pub const SDL_SCANCODE_MENU: u32 = 118;
pub const SDL_SCANCODE_SELECT: u32 = 119;
pub const SDL_SCANCODE_STOP: u32 = 120;
pub const SDL_SCANCODE_AGAIN: u32 = 121;
pub const SDL_SCANCODE_UNDO: u32 = 122;
pub const SDL_SCANCODE_CUT: u32 = 123;
pub const SDL_SCANCODE_COPY: u32 = 124;
pub const SDL_SCANCODE_PASTE: u32 = 125;
pub const SDL_SCANCODE_FIND: u32 = 126;
pub const SDL_SCANCODE_MUTE: u32 = 127;
pub const SDL_SCANCODE_VOLUMEUP: u32 = 128;
pub const SDL_SCANCODE_VOLUMEDOWN: u32 = 129;
pub const SDL_SCANCODE_KP_COMMA: u32 = 133;
pub const SDL_SCANCODE_KP_EQUALSAS400: u32 = 134;
pub const SDL_SCANCODE_INTERNATIONAL1: u32 = 135;
pub const SDL_SCANCODE_INTERNATIONAL2: u32 = 136;
pub const SDL_SCANCODE_INTERNATIONAL3: u32 = 137;
pub const SDL_SCANCODE_INTERNATIONAL4: u32 = 138;
pub const SDL_SCANCODE_INTERNATIONAL5: u32 = 139;
pub const SDL_SCANCODE_INTERNATIONAL6: u32 = 140;
pub const SDL_SCANCODE_INTERNATIONAL7: u32 = 141;
pub const SDL_SCANCODE_INTERNATIONAL8: u32 = 142;
pub const SDL_SCANCODE_INTERNATIONAL9: u32 = 143;
pub const SDL_SCANCODE_LANG1: u32 = 144;
pub const SDL_SCANCODE_LANG2: u32 = 145;
pub const SDL_SCANCODE_LANG3: u32 = 146;
pub const SDL_SCANCODE_LANG4: u32 = 147;
pub const SDL_SCANCODE_LANG5: u32 = 148;
pub const SDL_SCANCODE_LANG6: u32 = 149;
pub const SDL_SCANCODE_LANG7: u32 = 150;
pub const SDL_SCANCODE_LANG8: u32 = 151;
pub const SDL_SCANCODE_LANG9: u32 = 152;
pub const SDL_SCANCODE_ALTERASE: u32 = 153;
pub const SDL_SCANCODE_SYSREQ: u32 = 154;
pub const SDL_SCANCODE_CANCEL: u32 = 155;
pub const SDL_SCANCODE_CLEAR: u32 = 156;
pub const SDL_SCANCODE_PRIOR: u32 = 157;
pub const SDL_SCANCODE_RETURN2: u32 = 158;
pub const SDL_SCANCODE_SEPARATOR: u32 = 159;
pub const SDL_SCANCODE_OUT: u32 = 160;
pub const SDL_SCANCODE_OPER: u32 = 161;
pub const SDL_SCANCODE_CLEARAGAIN: u32 = 162;
pub const SDL_SCANCODE_CRSEL: u32 = 163;
pub const SDL_SCANCODE_EXSEL: u32 = 164;
pub const SDL_SCANCODE_KP_00: u32 = 176;
pub const SDL_SCANCODE_KP_000: u32 = 177;
pub const SDL_SCANCODE_THOUSANDSSEPARATOR: u32 = 178;
pub const SDL_SCANCODE_DECIMALSEPARATOR: u32 = 179;
pub const SDL_SCANCODE_CURRENCYUNIT: u32 = 180;
pub const SDL_SCANCODE_CURRENCYSUBUNIT: u32 = 181;
pub const SDL_SCANCODE_KP_LEFTPAREN: u32 = 182;
pub const SDL_SCANCODE_KP_RIGHTPAREN: u32 = 183;
pub const SDL_SCANCODE_KP_LEFTBRACE: u32 = 184;
pub const SDL_SCANCODE_KP_RIGHTBRACE: u32 = 185;
pub const SDL_SCANCODE_KP_TAB: u32 = 186;
pub const SDL_SCANCODE_KP_BACKSPACE: u32 = 187;
pub const SDL_SCANCODE_KP_A: u32 = 188;
pub const SDL_SCANCODE_KP_B: u32 = 189;
pub const SDL_SCANCODE_KP_C: u32 = 190;
pub const SDL_SCANCODE_KP_D: u32 = 191;
pub const SDL_SCANCODE_KP_E: u32 = 192;
pub const SDL_SCANCODE_KP_F: u32 = 193;
pub const SDL_SCANCODE_KP_XOR: u32 = 194;
pub const SDL_SCANCODE_KP_POWER: u32 = 195;
pub const SDL_SCANCODE_KP_PERCENT: u32 = 196;
pub const SDL_SCANCODE_KP_LESS: u32 = 197;
pub const SDL_SCANCODE_KP_GREATER: u32 = 198;
pub const SDL_SCANCODE_KP_AMPERSAND: u32 = 199;
pub const SDL_SCANCODE_KP_DBLAMPERSAND: u32 = 200;
pub const SDL_SCANCODE_KP_VERTICALBAR: u32 = 201;
pub const SDL_SCANCODE_KP_DBLVERTICALBAR: u32 = 202;
pub const SDL_SCANCODE_KP_COLON: u32 = 203;
pub const SDL_SCANCODE_KP_HASH: u32 = 204;
pub const SDL_SCANCODE_KP_SPACE: u32 = 205;
pub const SDL_SCANCODE_KP_AT: u32 = 206;
pub const SDL_SCANCODE_KP_EXCLAM: u32 = 207;
pub const SDL_SCANCODE_KP_MEMSTORE: u32 = 208;
pub const SDL_SCANCODE_KP_MEMRECALL: u32 = 209;
pub const SDL_SCANCODE_KP_MEMCLEAR: u32 = 210;
pub const SDL_SCANCODE_KP_MEMADD: u32 = 211;
pub const SDL_SCANCODE_KP_MEMSUBTRACT: u32 = 212;
pub const SDL_SCANCODE_KP_MEMMULTIPLY: u32 = 213;
pub const SDL_SCANCODE_KP_MEMDIVIDE: u32 = 214;
pub const SDL_SCANCODE_KP_PLUSMINUS: u32 = 215;
pub const SDL_SCANCODE_KP_CLEAR: u32 = 216;
pub const SDL_SCANCODE_KP_CLEARENTRY: u32 = 217;
pub const SDL_SCANCODE_KP_BINARY: u32 = 218;
pub const SDL_SCANCODE_KP_OCTAL: u32 = 219;
pub const SDL_SCANCODE_KP_DECIMAL: u32 = 220;
pub const SDL_SCANCODE_KP_HEXADECIMAL: u32 = 221;
pub const SDL_SCANCODE_LCTRL: u32 = 224;
pub const SDL_SCANCODE_LSHIFT: u32 = 225;
pub const SDL_SCANCODE_LALT: u32 = 226;
pub const SDL_SCANCODE_LGUI: u32 = 227;
pub const SDL_SCANCODE_RCTRL: u32 = 228;
pub const SDL_SCANCODE_RSHIFT: u32 = 229;
pub const SDL_SCANCODE_RALT: u32 = 230;
pub const SDL_SCANCODE_RGUI: u32 = 231;
pub const SDL_SCANCODE_MODE: u32 = 257;
pub const SDL_SCANCODE_AUDIONEXT: u32 = 258;
pub const SDL_SCANCODE_AUDIOPREV: u32 = 259;
pub const SDL_SCANCODE_AUDIOSTOP: u32 = 260;
pub const SDL_SCANCODE_AUDIOPLAY: u32 = 261;
pub const SDL_SCANCODE_AUDIOMUTE: u32 = 262;
pub const SDL_SCANCODE_MEDIASELECT: u32 = 263;
pub const SDL_SCANCODE_WWW: u32 = 264;
pub const SDL_SCANCODE_MAIL: u32 = 265;
pub const SDL_SCANCODE_CALCULATOR: u32 = 266;
pub const SDL_SCANCODE_COMPUTER: u32 = 267;
pub const SDL_SCANCODE_AC_SEARCH: u32 = 268;
pub const SDL_SCANCODE_AC_HOME: u32 = 269;
pub const SDL_SCANCODE_AC_BACK: u32 = 270;
pub const SDL_SCANCODE_AC_FORWARD: u32 = 271;
pub const SDL_SCANCODE_AC_STOP: u32 = 272;
pub const SDL_SCANCODE_AC_REFRESH: u32 = 273;
pub const SDL_SCANCODE_AC_BOOKMARKS: u32 = 274;
pub const SDL_SCANCODE_BRIGHTNESSDOWN: u32 = 275;
pub const SDL_SCANCODE_BRIGHTNESSUP: u32 = 276;
pub const SDL_SCANCODE_DISPLAYSWITCH: u32 = 277;
pub const SDL_SCANCODE_KBDILLUMTOGGLE: u32 = 278;
pub const SDL_SCANCODE_KBDILLUMDOWN: u32 = 279;
pub const SDL_SCANCODE_KBDILLUMUP: u32 = 280;
pub const SDL_SCANCODE_EJECT: u32 = 281;
pub const SDL_SCANCODE_SLEEP: u32 = 282;
pub const SDL_SCANCODE_APP1: u32 = 283;
pub const SDL_SCANCODE_APP2: u32 = 284;
pub const SDL_SCANCODE_AUDIOREWIND: u32 = 285;
pub const SDL_SCANCODE_AUDIOFASTFORWARD: u32 = 286;
pub const SDL_NUM_SCANCODES: u32 = 512;
pub typedef SDL_Scancode u32;
pub typedef SDL_Keycode Sint32;
pub const SDLK_UNKNOWN: u32 = 0;
pub const SDLK_RETURN: u32 = 13;
pub const SDLK_ESCAPE: u32 = 27;
pub const SDLK_BACKSPACE: u32 = 8;
pub const SDLK_TAB: u32 = 9;
pub const SDLK_SPACE: u32 = 32;
pub const SDLK_EXCLAIM: u32 = 33;
pub const SDLK_QUOTEDBL: u32 = 34;
pub const SDLK_HASH: u32 = 35;
pub const SDLK_PERCENT: u32 = 37;
pub const SDLK_DOLLAR: u32 = 36;
pub const SDLK_AMPERSAND: u32 = 38;
pub const SDLK_QUOTE: u32 = 39;
pub const SDLK_LEFTPAREN: u32 = 40;
pub const SDLK_RIGHTPAREN: u32 = 41;
pub const SDLK_ASTERISK: u32 = 42;
pub const SDLK_PLUS: u32 = 43;
pub const SDLK_COMMA: u32 = 44;
pub const SDLK_MINUS: u32 = 45;
pub const SDLK_PERIOD: u32 = 46;
pub const SDLK_SLASH: u32 = 47;
pub const SDLK_0: u32 = 48;
pub const SDLK_1: u32 = 49;
pub const SDLK_2: u32 = 50;
pub const SDLK_3: u32 = 51;
pub const SDLK_4: u32 = 52;
pub const SDLK_5: u32 = 53;
pub const SDLK_6: u32 = 54;
pub const SDLK_7: u32 = 55;
pub const SDLK_8: u32 = 56;
pub const SDLK_9: u32 = 57;
pub const SDLK_COLON: u32 = 58;
pub const SDLK_SEMICOLON: u32 = 59;
pub const SDLK_LESS: u32 = 60;
pub const SDLK_EQUALS: u32 = 61;
pub const SDLK_GREATER: u32 = 62;
pub const SDLK_QUESTION: u32 = 63;
pub const SDLK_AT: u32 = 64;
pub const SDLK_LEFTBRACKET: u32 = 91;
pub const SDLK_BACKSLASH: u32 = 92;
pub const SDLK_RIGHTBRACKET: u32 = 93;
pub const SDLK_CARET: u32 = 94;
pub const SDLK_UNDERSCORE: u32 = 95;
pub const SDLK_BACKQUOTE: u32 = 96;
pub const SDLK_a: u32 = 97;
pub const SDLK_b: u32 = 98;
pub const SDLK_c: u32 = 99;
pub const SDLK_d: u32 = 100;
pub const SDLK_e: u32 = 101;
pub const SDLK_f: u32 = 102;
pub const SDLK_g: u32 = 103;
pub const SDLK_h: u32 = 104;
pub const SDLK_i: u32 = 105;
pub const SDLK_j: u32 = 106;
pub const SDLK_k: u32 = 107;
pub const SDLK_l: u32 = 108;
pub const SDLK_m: u32 = 109;
pub const SDLK_n: u32 = 110;
pub const SDLK_o: u32 = 111;
pub const SDLK_p: u32 = 112;
pub const SDLK_q: u32 = 113;
pub const SDLK_r: u32 = 114;
pub const SDLK_s: u32 = 115;
pub const SDLK_t: u32 = 116;
pub const SDLK_u: u32 = 117;
pub const SDLK_v: u32 = 118;
pub const SDLK_w: u32 = 119;
pub const SDLK_x: u32 = 120;
pub const SDLK_y: u32 = 121;
pub const SDLK_z: u32 = 122;
pub const SDLK_CAPSLOCK: u32 = 1073741881;
pub const SDLK_F1: u32 = 1073741882;
pub const SDLK_F2: u32 = 1073741883;
pub const SDLK_F3: u32 = 1073741884;
pub const SDLK_F4: u32 = 1073741885;
pub const SDLK_F5: u32 = 1073741886;
pub const SDLK_F6: u32 = 1073741887;
pub const SDLK_F7: u32 = 1073741888;
pub const SDLK_F8: u32 = 1073741889;
pub const SDLK_F9: u32 = 1073741890;
pub const SDLK_F10: u32 = 1073741891;
pub const SDLK_F11: u32 = 1073741892;
pub const SDLK_F12: u32 = 1073741893;
pub const SDLK_PRINTSCREEN: u32 = 1073741894;
pub const SDLK_SCROLLLOCK: u32 = 1073741895;
pub const SDLK_PAUSE: u32 = 1073741896;
pub const SDLK_INSERT: u32 = 1073741897;
pub const SDLK_HOME: u32 = 1073741898;
pub const SDLK_PAGEUP: u32 = 1073741899;
pub const SDLK_DELETE: u32 = 127;
pub const SDLK_END: u32 = 1073741901;
pub const SDLK_PAGEDOWN: u32 = 1073741902;
pub const SDLK_RIGHT: u32 = 1073741903;
pub const SDLK_LEFT: u32 = 1073741904;
pub const SDLK_DOWN: u32 = 1073741905;
pub const SDLK_UP: u32 = 1073741906;
pub const SDLK_NUMLOCKCLEAR: u32 = 1073741907;
pub const SDLK_KP_DIVIDE: u32 = 1073741908;
pub const SDLK_KP_MULTIPLY: u32 = 1073741909;
pub const SDLK_KP_MINUS: u32 = 1073741910;
pub const SDLK_KP_PLUS: u32 = 1073741911;
pub const SDLK_KP_ENTER: u32 = 1073741912;
pub const SDLK_KP_1: u32 = 1073741913;
pub const SDLK_KP_2: u32 = 1073741914;
pub const SDLK_KP_3: u32 = 1073741915;
pub const SDLK_KP_4: u32 = 1073741916;
pub const SDLK_KP_5: u32 = 1073741917;
pub const SDLK_KP_6: u32 = 1073741918;
pub const SDLK_KP_7: u32 = 1073741919;
pub const SDLK_KP_8: u32 = 1073741920;
pub const SDLK_KP_9: u32 = 1073741921;
pub const SDLK_KP_0: u32 = 1073741922;
pub const SDLK_KP_PERIOD: u32 = 1073741923;
pub const SDLK_APPLICATION: u32 = 1073741925;
pub const SDLK_POWER: u32 = 1073741926;
pub const SDLK_KP_EQUALS: u32 = 1073741927;
pub const SDLK_F13: u32 = 1073741928;
pub const SDLK_F14: u32 = 1073741929;
pub const SDLK_F15: u32 = 1073741930;
pub const SDLK_F16: u32 = 1073741931;
pub const SDLK_F17: u32 = 1073741932;
pub const SDLK_F18: u32 = 1073741933;
pub const SDLK_F19: u32 = 1073741934;
pub const SDLK_F20: u32 = 1073741935;
pub const SDLK_F21: u32 = 1073741936;
pub const SDLK_F22: u32 = 1073741937;
pub const SDLK_F23: u32 = 1073741938;
pub const SDLK_F24: u32 = 1073741939;
pub const SDLK_EXECUTE: u32 = 1073741940;
pub const SDLK_HELP: u32 = 1073741941;
pub const SDLK_MENU: u32 = 1073741942;
pub const SDLK_SELECT: u32 = 1073741943;
pub const SDLK_STOP: u32 = 1073741944;
pub const SDLK_AGAIN: u32 = 1073741945;
pub const SDLK_UNDO: u32 = 1073741946;
pub const SDLK_CUT: u32 = 1073741947;
pub const SDLK_COPY: u32 = 1073741948;
pub const SDLK_PASTE: u32 = 1073741949;
pub const SDLK_FIND: u32 = 1073741950;
pub const SDLK_MUTE: u32 = 1073741951;
pub const SDLK_VOLUMEUP: u32 = 1073741952;
pub const SDLK_VOLUMEDOWN: u32 = 1073741953;
pub const SDLK_KP_COMMA: u32 = 1073741957;
pub const SDLK_KP_EQUALSAS400: u32 = 1073741958;
pub const SDLK_ALTERASE: u32 = 1073741977;
pub const SDLK_SYSREQ: u32 = 1073741978;
pub const SDLK_CANCEL: u32 = 1073741979;
pub const SDLK_CLEAR: u32 = 1073741980;
pub const SDLK_PRIOR: u32 = 1073741981;
pub const SDLK_RETURN2: u32 = 1073741982;
pub const SDLK_SEPARATOR: u32 = 1073741983;
pub const SDLK_OUT: u32 = 1073741984;
pub const SDLK_OPER: u32 = 1073741985;
pub const SDLK_CLEARAGAIN: u32 = 1073741986;
pub const SDLK_CRSEL: u32 = 1073741987;
pub const SDLK_EXSEL: u32 = 1073741988;
pub const SDLK_KP_00: u32 = 1073742000;
pub const SDLK_KP_000: u32 = 1073742001;
pub const SDLK_THOUSANDSSEPARATOR: u32 = 1073742002;
pub const SDLK_DECIMALSEPARATOR: u32 = 1073742003;
pub const SDLK_CURRENCYUNIT: u32 = 1073742004;
pub const SDLK_CURRENCYSUBUNIT: u32 = 1073742005;
pub const SDLK_KP_LEFTPAREN: u32 = 1073742006;
pub const SDLK_KP_RIGHTPAREN: u32 = 1073742007;
pub const SDLK_KP_LEFTBRACE: u32 = 1073742008;
pub const SDLK_KP_RIGHTBRACE: u32 = 1073742009;
pub const SDLK_KP_TAB: u32 = 1073742010;
pub const SDLK_KP_BACKSPACE: u32 = 1073742011;
pub const SDLK_KP_A: u32 = 1073742012;
pub const SDLK_KP_B: u32 = 1073742013;
pub const SDLK_KP_C: u32 = 1073742014;
pub const SDLK_KP_D: u32 = 1073742015;
pub const SDLK_KP_E: u32 = 1073742016;
pub const SDLK_KP_F: u32 = 1073742017;
pub const SDLK_KP_XOR: u32 = 1073742018;
pub const SDLK_KP_POWER: u32 = 1073742019;
pub const SDLK_KP_PERCENT: u32 = 1073742020;
pub const SDLK_KP_LESS: u32 = 1073742021;
pub const SDLK_KP_GREATER: u32 = 1073742022;
pub const SDLK_KP_AMPERSAND: u32 = 1073742023;
pub const SDLK_KP_DBLAMPERSAND: u32 = 1073742024;
pub const SDLK_KP_VERTICALBAR: u32 = 1073742025;
pub const SDLK_KP_DBLVERTICALBAR: u32 = 1073742026;
pub const SDLK_KP_COLON: u32 = 1073742027;
pub const SDLK_KP_HASH: u32 = 1073742028;
pub const SDLK_KP_SPACE: u32 = 1073742029;
pub const SDLK_KP_AT: u32 = 1073742030;
pub const SDLK_KP_EXCLAM: u32 = 1073742031;
pub const SDLK_KP_MEMSTORE: u32 = 1073742032;
pub const SDLK_KP_MEMRECALL: u32 = 1073742033;
pub const SDLK_KP_MEMCLEAR: u32 = 1073742034;
pub const SDLK_KP_MEMADD: u32 = 1073742035;
pub const SDLK_KP_MEMSUBTRACT: u32 = 1073742036;
pub const SDLK_KP_MEMMULTIPLY: u32 = 1073742037;
pub const SDLK_KP_MEMDIVIDE: u32 = 1073742038;
pub const SDLK_KP_PLUSMINUS: u32 = 1073742039;
pub const SDLK_KP_CLEAR: u32 = 1073742040;
pub const SDLK_KP_CLEARENTRY: u32 = 1073742041;
pub const SDLK_KP_BINARY: u32 = 1073742042;
pub const SDLK_KP_OCTAL: u32 = 1073742043;
pub const SDLK_KP_DECIMAL: u32 = 1073742044;
pub const SDLK_KP_HEXADECIMAL: u32 = 1073742045;
pub const SDLK_LCTRL: u32 = 1073742048;
pub const SDLK_LSHIFT: u32 = 1073742049;
pub const SDLK_LALT: u32 = 1073742050;
pub const SDLK_LGUI: u32 = 1073742051;
pub const SDLK_RCTRL: u32 = 1073742052;
pub const SDLK_RSHIFT: u32 = 1073742053;
pub const SDLK_RALT: u32 = 1073742054;
pub const SDLK_RGUI: u32 = 1073742055;
pub const SDLK_MODE: u32 = 1073742081;
pub const SDLK_AUDIONEXT: u32 = 1073742082;
pub const SDLK_AUDIOPREV: u32 = 1073742083;
pub const SDLK_AUDIOSTOP: u32 = 1073742084;
pub const SDLK_AUDIOPLAY: u32 = 1073742085;
pub const SDLK_AUDIOMUTE: u32 = 1073742086;
pub const SDLK_MEDIASELECT: u32 = 1073742087;
pub const SDLK_WWW: u32 = 1073742088;
pub const SDLK_MAIL: u32 = 1073742089;
pub const SDLK_CALCULATOR: u32 = 1073742090;
pub const SDLK_COMPUTER: u32 = 1073742091;
pub const SDLK_AC_SEARCH: u32 = 1073742092;
pub const SDLK_AC_HOME: u32 = 1073742093;
pub const SDLK_AC_BACK: u32 = 1073742094;
pub const SDLK_AC_FORWARD: u32 = 1073742095;
pub const SDLK_AC_STOP: u32 = 1073742096;
pub const SDLK_AC_REFRESH: u32 = 1073742097;
pub const SDLK_AC_BOOKMARKS: u32 = 1073742098;
pub const SDLK_BRIGHTNESSDOWN: u32 = 1073742099;
pub const SDLK_BRIGHTNESSUP: u32 = 1073742100;
pub const SDLK_DISPLAYSWITCH: u32 = 1073742101;
pub const SDLK_KBDILLUMTOGGLE: u32 = 1073742102;
pub const SDLK_KBDILLUMDOWN: u32 = 1073742103;
pub const SDLK_KBDILLUMUP: u32 = 1073742104;
pub const SDLK_EJECT: u32 = 1073742105;
pub const SDLK_SLEEP: u32 = 1073742106;
pub const SDLK_APP1: u32 = 1073742107;
pub const SDLK_APP2: u32 = 1073742108;
pub const SDLK_AUDIOREWIND: u32 = 1073742109;
pub const SDLK_AUDIOFASTFORWARD: u32 = 1073742110;
pub const KMOD_NONE: u32 = 0;
pub const KMOD_LSHIFT: u32 = 1;
pub const KMOD_RSHIFT: u32 = 2;
pub const KMOD_LCTRL: u32 = 64;
pub const KMOD_RCTRL: u32 = 128;
pub const KMOD_LALT: u32 = 256;
pub const KMOD_RALT: u32 = 512;
pub const KMOD_LGUI: u32 = 1024;
pub const KMOD_RGUI: u32 = 2048;
pub const KMOD_NUM: u32 = 4096;
pub const KMOD_CAPS: u32 = 8192;
pub const KMOD_MODE: u32 = 16384;
pub const KMOD_RESERVED: u32 = 32768;
pub typedef SDL_Keymod u32;
pub typedef SDL_Keysym struct {
    scancode: SDL_Scancode,
    sym: SDL_Keycode,
    mod: Uint16,
    unused: Uint32,
};
pub extern fn SDL_GetKeyboardFocus() -> *SDL_Window;
pub extern fn SDL_GetKeyboardState(numkeys: *i32) -> *Uint8;
pub extern fn SDL_GetModState() -> SDL_Keymod;
pub extern fn SDL_SetModState(modstate: SDL_Keymod);
pub extern fn SDL_GetKeyFromScancode(scancode: SDL_Scancode) -> SDL_Keycode;
pub extern fn SDL_GetScancodeFromKey(key: SDL_Keycode) -> SDL_Scancode;
pub extern fn SDL_GetScancodeName(scancode: SDL_Scancode) -> *i8;
pub extern fn SDL_GetScancodeFromName(name: *i8) -> SDL_Scancode;
pub extern fn SDL_GetKeyName(key: SDL_Keycode) -> *i8;
pub extern fn SDL_GetKeyFromName(name: *i8) -> SDL_Keycode;
pub extern fn SDL_StartTextInput();
pub extern fn SDL_IsTextInputActive() -> SDL_bool;
pub extern fn SDL_StopTextInput();
pub extern fn SDL_SetTextInputRect(rect: *SDL_Rect);
pub extern fn SDL_HasScreenKeyboardSupport() -> SDL_bool;
pub extern fn SDL_IsScreenKeyboardShown(window: *SDL_Window) -> SDL_bool;
pub typedef SDL_Cursor struct {
};
pub const SDL_SYSTEM_CURSOR_ARROW: u32 = 0;
pub const SDL_SYSTEM_CURSOR_IBEAM: u32 = 1;
pub const SDL_SYSTEM_CURSOR_WAIT: u32 = 2;
pub const SDL_SYSTEM_CURSOR_CROSSHAIR: u32 = 3;
pub const SDL_SYSTEM_CURSOR_WAITARROW: u32 = 4;
pub const SDL_SYSTEM_CURSOR_SIZENWSE: u32 = 5;
pub const SDL_SYSTEM_CURSOR_SIZENESW: u32 = 6;
pub const SDL_SYSTEM_CURSOR_SIZEWE: u32 = 7;
pub const SDL_SYSTEM_CURSOR_SIZENS: u32 = 8;
pub const SDL_SYSTEM_CURSOR_SIZEALL: u32 = 9;
pub const SDL_SYSTEM_CURSOR_NO: u32 = 10;
pub const SDL_SYSTEM_CURSOR_HAND: u32 = 11;
pub const SDL_NUM_SYSTEM_CURSORS: u32 = 12;
pub typedef SDL_SystemCursor u32;
pub const SDL_MOUSEWHEEL_NORMAL: u32 = 0;
pub const SDL_MOUSEWHEEL_FLIPPED: u32 = 1;
pub typedef SDL_MouseWheelDirection u32;
pub extern fn SDL_GetMouseFocus() -> *SDL_Window;
pub extern fn SDL_GetMouseState(x: *i32, y: *i32) -> Uint32;
pub extern fn SDL_GetGlobalMouseState(x: *i32, y: *i32) -> Uint32;
pub extern fn SDL_GetRelativeMouseState(x: *i32, y: *i32) -> Uint32;
pub extern fn SDL_WarpMouseInWindow(window: *SDL_Window, x: i32, y: i32);
pub extern fn SDL_WarpMouseGlobal(x: i32, y: i32) -> i32;
pub extern fn SDL_SetRelativeMouseMode(enabled: SDL_bool) -> i32;
pub extern fn SDL_CaptureMouse(enabled: SDL_bool) -> i32;
pub extern fn SDL_GetRelativeMouseMode() -> SDL_bool;
pub extern fn SDL_CreateCursor(data: *Uint8, mask: *Uint8, w: i32, h: i32, hot_x: i32, hot_y: i32) -> *SDL_Cursor;
pub extern fn SDL_CreateColorCursor(surface: *SDL_Surface, hot_x: i32, hot_y: i32) -> *SDL_Cursor;
pub extern fn SDL_CreateSystemCursor(id: SDL_SystemCursor) -> *SDL_Cursor;
pub extern fn SDL_SetCursor(cursor: *SDL_Cursor);
pub extern fn SDL_GetCursor() -> *SDL_Cursor;
pub extern fn SDL_GetDefaultCursor() -> *SDL_Cursor;
pub extern fn SDL_FreeCursor(cursor: *SDL_Cursor);
pub extern fn SDL_ShowCursor(toggle: i32) -> i32;
pub typedef _SDL_Joystick struct {
};
pub typedef SDL_Joystick _SDL_Joystick;
pub typedef SDL_JoystickGUID struct {
    data: [16]Uint8,
};
pub typedef SDL_JoystickID Sint32;
pub const SDL_JOYSTICK_TYPE_UNKNOWN: u32 = 0;
pub const SDL_JOYSTICK_TYPE_GAMECONTROLLER: u32 = 1;
pub const SDL_JOYSTICK_TYPE_WHEEL: u32 = 2;
pub const SDL_JOYSTICK_TYPE_ARCADE_STICK: u32 = 3;
pub const SDL_JOYSTICK_TYPE_FLIGHT_STICK: u32 = 4;
pub const SDL_JOYSTICK_TYPE_DANCE_PAD: u32 = 5;
pub const SDL_JOYSTICK_TYPE_GUITAR: u32 = 6;
pub const SDL_JOYSTICK_TYPE_DRUM_KIT: u32 = 7;
pub const SDL_JOYSTICK_TYPE_ARCADE_PAD: u32 = 8;
pub const SDL_JOYSTICK_TYPE_THROTTLE: u32 = 9;
pub typedef SDL_JoystickType u32;
pub const SDL_JOYSTICK_POWER_UNKNOWN: i32 = -1;
pub const SDL_JOYSTICK_POWER_EMPTY: i32 = 0;
pub const SDL_JOYSTICK_POWER_LOW: i32 = 1;
pub const SDL_JOYSTICK_POWER_MEDIUM: i32 = 2;
pub const SDL_JOYSTICK_POWER_FULL: i32 = 3;
pub const SDL_JOYSTICK_POWER_WIRED: i32 = 4;
pub const SDL_JOYSTICK_POWER_MAX: i32 = 5;
pub typedef SDL_JoystickPowerLevel i32;
pub extern fn SDL_LockJoysticks();
pub extern fn SDL_UnlockJoysticks();
pub extern fn SDL_NumJoysticks() -> i32;
pub extern fn SDL_JoystickNameForIndex(device_index: i32) -> *i8;
pub extern fn SDL_JoystickGetDevicePlayerIndex(device_index: i32) -> i32;
pub extern fn SDL_JoystickGetDeviceGUID(device_index: i32) -> SDL_JoystickGUID;
pub extern fn SDL_JoystickGetDeviceVendor(device_index: i32) -> Uint16;
pub extern fn SDL_JoystickGetDeviceProduct(device_index: i32) -> Uint16;
pub extern fn SDL_JoystickGetDeviceProductVersion(device_index: i32) -> Uint16;
pub extern fn SDL_JoystickGetDeviceType(device_index: i32) -> SDL_JoystickType;
pub extern fn SDL_JoystickGetDeviceInstanceID(device_index: i32) -> SDL_JoystickID;
pub extern fn SDL_JoystickOpen(device_index: i32) -> *SDL_Joystick;
pub extern fn SDL_JoystickFromInstanceID(joyid: SDL_JoystickID) -> *SDL_Joystick;
pub extern fn SDL_JoystickName(joystick: *SDL_Joystick) -> *i8;
pub extern fn SDL_JoystickGetPlayerIndex(joystick: *SDL_Joystick) -> i32;
pub extern fn SDL_JoystickGetGUID(joystick: *SDL_Joystick) -> SDL_JoystickGUID;
pub extern fn SDL_JoystickGetVendor(joystick: *SDL_Joystick) -> Uint16;
pub extern fn SDL_JoystickGetProduct(joystick: *SDL_Joystick) -> Uint16;
pub extern fn SDL_JoystickGetProductVersion(joystick: *SDL_Joystick) -> Uint16;
pub extern fn SDL_JoystickGetType(joystick: *SDL_Joystick) -> SDL_JoystickType;
pub extern fn SDL_JoystickGetGUIDFromString(pchGUID: *i8) -> SDL_JoystickGUID;
pub extern fn SDL_JoystickGetAttached(joystick: *SDL_Joystick) -> SDL_bool;
pub extern fn SDL_JoystickInstanceID(joystick: *SDL_Joystick) -> SDL_JoystickID;
pub extern fn SDL_JoystickNumAxes(joystick: *SDL_Joystick) -> i32;
pub extern fn SDL_JoystickNumBalls(joystick: *SDL_Joystick) -> i32;
pub extern fn SDL_JoystickNumHats(joystick: *SDL_Joystick) -> i32;
pub extern fn SDL_JoystickNumButtons(joystick: *SDL_Joystick) -> i32;
pub extern fn SDL_JoystickUpdate();
pub extern fn SDL_JoystickEventState(state: i32) -> i32;
pub extern fn SDL_JoystickGetAxis(joystick: *SDL_Joystick, axis: i32) -> Sint16;
pub extern fn SDL_JoystickGetAxisInitialState(joystick: *SDL_Joystick, axis: i32, state: *Sint16) -> SDL_bool;
pub extern fn SDL_JoystickGetHat(joystick: *SDL_Joystick, hat: i32) -> Uint8;
pub extern fn SDL_JoystickGetBall(joystick: *SDL_Joystick, ball: i32, dx: *i32, dy: *i32) -> i32;
pub extern fn SDL_JoystickGetButton(joystick: *SDL_Joystick, button: i32) -> Uint8;
pub extern fn SDL_JoystickRumble(joystick: *SDL_Joystick, low_frequency_rumble: Uint16, high_frequency_rumble: Uint16, duration_ms: Uint32) -> i32;
pub extern fn SDL_JoystickClose(joystick: *SDL_Joystick);
pub extern fn SDL_JoystickCurrentPowerLevel(joystick: *SDL_Joystick) -> SDL_JoystickPowerLevel;
pub typedef _SDL_GameController struct {
};
pub typedef SDL_GameController _SDL_GameController;
pub const SDL_CONTROLLER_BINDTYPE_NONE: u32 = 0;
pub const SDL_CONTROLLER_BINDTYPE_BUTTON: u32 = 1;
pub const SDL_CONTROLLER_BINDTYPE_AXIS: u32 = 2;
pub const SDL_CONTROLLER_BINDTYPE_HAT: u32 = 3;
pub typedef SDL_GameControllerBindType u32;
pub typedef SDL_GameControllerButtonBind struct {
    bindType: SDL_GameControllerBindType,
    value: union {
        button: i32,
        axis: i32,
        hat: struct {
            hat: i32,
            hat_mask: i32,
        },
    },
};
pub extern fn SDL_GameControllerAddMappingsFromRW(rw: *SDL_RWops, freerw: i32) -> i32;
pub extern fn SDL_GameControllerAddMapping(mappingString: *i8) -> i32;
pub extern fn SDL_GameControllerNumMappings() -> i32;
pub extern fn SDL_GameControllerMappingForIndex(mapping_index: i32) -> *i8;
pub extern fn SDL_GameControllerMapping(gamecontroller: *SDL_GameController) -> *i8;
pub extern fn SDL_IsGameController(joystick_index: i32) -> SDL_bool;
pub extern fn SDL_GameControllerNameForIndex(joystick_index: i32) -> *i8;
pub extern fn SDL_GameControllerMappingForDeviceIndex(joystick_index: i32) -> *i8;
pub extern fn SDL_GameControllerOpen(joystick_index: i32) -> *SDL_GameController;
pub extern fn SDL_GameControllerFromInstanceID(joyid: SDL_JoystickID) -> *SDL_GameController;
pub extern fn SDL_GameControllerName(gamecontroller: *SDL_GameController) -> *i8;
pub extern fn SDL_GameControllerGetPlayerIndex(gamecontroller: *SDL_GameController) -> i32;
pub extern fn SDL_GameControllerGetVendor(gamecontroller: *SDL_GameController) -> Uint16;
pub extern fn SDL_GameControllerGetProduct(gamecontroller: *SDL_GameController) -> Uint16;
pub extern fn SDL_GameControllerGetProductVersion(gamecontroller: *SDL_GameController) -> Uint16;
pub extern fn SDL_GameControllerGetAttached(gamecontroller: *SDL_GameController) -> SDL_bool;
pub extern fn SDL_GameControllerGetJoystick(gamecontroller: *SDL_GameController) -> *SDL_Joystick;
pub extern fn SDL_GameControllerEventState(state: i32) -> i32;
pub extern fn SDL_GameControllerUpdate();
pub const SDL_CONTROLLER_AXIS_INVALID: i32 = -1;
pub const SDL_CONTROLLER_AXIS_LEFTX: i32 = 0;
pub const SDL_CONTROLLER_AXIS_LEFTY: i32 = 1;
pub const SDL_CONTROLLER_AXIS_RIGHTX: i32 = 2;
pub const SDL_CONTROLLER_AXIS_RIGHTY: i32 = 3;
pub const SDL_CONTROLLER_AXIS_TRIGGERLEFT: i32 = 4;
pub const SDL_CONTROLLER_AXIS_TRIGGERRIGHT: i32 = 5;
pub const SDL_CONTROLLER_AXIS_MAX: i32 = 6;
pub typedef SDL_GameControllerAxis i32;
pub extern fn SDL_GameControllerGetAxisFromString(pchString: *i8) -> SDL_GameControllerAxis;
pub extern fn SDL_GameControllerGetStringForAxis(axis: SDL_GameControllerAxis) -> *i8;
pub extern fn SDL_GameControllerGetBindForAxis(gamecontroller: *SDL_GameController, axis: SDL_GameControllerAxis) -> SDL_GameControllerButtonBind;
pub extern fn SDL_GameControllerGetAxis(gamecontroller: *SDL_GameController, axis: SDL_GameControllerAxis) -> Sint16;
pub const SDL_CONTROLLER_BUTTON_INVALID: i32 = -1;
pub const SDL_CONTROLLER_BUTTON_A: i32 = 0;
pub const SDL_CONTROLLER_BUTTON_B: i32 = 1;
pub const SDL_CONTROLLER_BUTTON_X: i32 = 2;
pub const SDL_CONTROLLER_BUTTON_Y: i32 = 3;
pub const SDL_CONTROLLER_BUTTON_BACK: i32 = 4;
pub const SDL_CONTROLLER_BUTTON_GUIDE: i32 = 5;
pub const SDL_CONTROLLER_BUTTON_START: i32 = 6;
pub const SDL_CONTROLLER_BUTTON_LEFTSTICK: i32 = 7;
pub const SDL_CONTROLLER_BUTTON_RIGHTSTICK: i32 = 8;
pub const SDL_CONTROLLER_BUTTON_LEFTSHOULDER: i32 = 9;
pub const SDL_CONTROLLER_BUTTON_RIGHTSHOULDER: i32 = 10;
pub const SDL_CONTROLLER_BUTTON_DPAD_UP: i32 = 11;
pub const SDL_CONTROLLER_BUTTON_DPAD_DOWN: i32 = 12;
pub const SDL_CONTROLLER_BUTTON_DPAD_LEFT: i32 = 13;
pub const SDL_CONTROLLER_BUTTON_DPAD_RIGHT: i32 = 14;
pub const SDL_CONTROLLER_BUTTON_MAX: i32 = 15;
pub typedef SDL_GameControllerButton i32;
pub extern fn SDL_GameControllerGetButtonFromString(pchString: *i8) -> SDL_GameControllerButton;
pub extern fn SDL_GameControllerGetStringForButton(button: SDL_GameControllerButton) -> *i8;
pub extern fn SDL_GameControllerGetBindForButton(gamecontroller: *SDL_GameController, button: SDL_GameControllerButton) -> SDL_GameControllerButtonBind;
pub extern fn SDL_GameControllerGetButton(gamecontroller: *SDL_GameController, button: SDL_GameControllerButton) -> Uint8;
pub extern fn SDL_GameControllerRumble(gamecontroller: *SDL_GameController, low_frequency_rumble: Uint16, high_frequency_rumble: Uint16, duration_ms: Uint32) -> i32;
pub extern fn SDL_GameControllerClose(gamecontroller: *SDL_GameController);
pub typedef SDL_TouchID Sint64;
pub typedef SDL_FingerID Sint64;
pub const SDL_TOUCH_DEVICE_INVALID: i32 = -1;
pub const SDL_TOUCH_DEVICE_DIRECT: i32 = 0;
pub const SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE: i32 = 1;
pub const SDL_TOUCH_DEVICE_INDIRECT_RELATIVE: i32 = 2;
pub typedef SDL_TouchDeviceType i32;
pub typedef SDL_Finger struct {
    id: SDL_FingerID,
    x: float,
    y: float,
    pressure: float,
};
pub extern fn SDL_GetNumTouchDevices() -> i32;
pub extern fn SDL_GetTouchDevice(index: i32) -> SDL_TouchID;
pub extern fn SDL_GetTouchDeviceType(touchID: SDL_TouchID) -> SDL_TouchDeviceType;
pub extern fn SDL_GetNumTouchFingers(touchID: SDL_TouchID) -> i32;
pub extern fn SDL_GetTouchFinger(touchID: SDL_TouchID, index: i32) -> *SDL_Finger;
pub typedef SDL_GestureID Sint64;
pub extern fn SDL_RecordGesture(touchId: SDL_TouchID) -> i32;
pub extern fn SDL_SaveAllDollarTemplates(dst: *SDL_RWops) -> i32;
pub extern fn SDL_SaveDollarTemplate(gestureId: SDL_GestureID, dst: *SDL_RWops) -> i32;
pub extern fn SDL_LoadDollarTemplates(touchId: SDL_TouchID, src: *SDL_RWops) -> i32;
pub const SDL_FIRSTEVENT: u32 = 0;
pub const SDL_QUIT: u32 = 256;
pub const SDL_APP_TERMINATING: u32 = 257;
pub const SDL_APP_LOWMEMORY: u32 = 258;
pub const SDL_APP_WILLENTERBACKGROUND: u32 = 259;
pub const SDL_APP_DIDENTERBACKGROUND: u32 = 260;
pub const SDL_APP_WILLENTERFOREGROUND: u32 = 261;
pub const SDL_APP_DIDENTERFOREGROUND: u32 = 262;
pub const SDL_DISPLAYEVENT: u32 = 336;
pub const SDL_WINDOWEVENT: u32 = 512;
pub const SDL_SYSWMEVENT: u32 = 513;
pub const SDL_KEYDOWN: u32 = 768;
pub const SDL_KEYUP: u32 = 769;
pub const SDL_TEXTEDITING: u32 = 770;
pub const SDL_TEXTINPUT: u32 = 771;
pub const SDL_KEYMAPCHANGED: u32 = 772;
pub const SDL_MOUSEMOTION: u32 = 1024;
pub const SDL_MOUSEBUTTONDOWN: u32 = 1025;
pub const SDL_MOUSEBUTTONUP: u32 = 1026;
pub const SDL_MOUSEWHEEL: u32 = 1027;
pub const SDL_JOYAXISMOTION: u32 = 1536;
pub const SDL_JOYBALLMOTION: u32 = 1537;
pub const SDL_JOYHATMOTION: u32 = 1538;
pub const SDL_JOYBUTTONDOWN: u32 = 1539;
pub const SDL_JOYBUTTONUP: u32 = 1540;
pub const SDL_JOYDEVICEADDED: u32 = 1541;
pub const SDL_JOYDEVICEREMOVED: u32 = 1542;
pub const SDL_CONTROLLERAXISMOTION: u32 = 1616;
pub const SDL_CONTROLLERBUTTONDOWN: u32 = 1617;
pub const SDL_CONTROLLERBUTTONUP: u32 = 1618;
pub const SDL_CONTROLLERDEVICEADDED: u32 = 1619;
pub const SDL_CONTROLLERDEVICEREMOVED: u32 = 1620;
pub const SDL_CONTROLLERDEVICEREMAPPED: u32 = 1621;
pub const SDL_FINGERDOWN: u32 = 1792;
pub const SDL_FINGERUP: u32 = 1793;
pub const SDL_FINGERMOTION: u32 = 1794;
pub const SDL_DOLLARGESTURE: u32 = 2048;
pub const SDL_DOLLARRECORD: u32 = 2049;
pub const SDL_MULTIGESTURE: u32 = 2050;
pub const SDL_CLIPBOARDUPDATE: u32 = 2304;
pub const SDL_DROPFILE: u32 = 4096;
pub const SDL_DROPTEXT: u32 = 4097;
pub const SDL_DROPBEGIN: u32 = 4098;
pub const SDL_DROPCOMPLETE: u32 = 4099;
pub const SDL_AUDIODEVICEADDED: u32 = 4352;
pub const SDL_AUDIODEVICEREMOVED: u32 = 4353;
pub const SDL_SENSORUPDATE: u32 = 4608;
pub const SDL_RENDER_TARGETS_RESET: u32 = 8192;
pub const SDL_RENDER_DEVICE_RESET: u32 = 8193;
pub const SDL_USEREVENT: u32 = 32768;
pub const SDL_LASTEVENT: u32 = 65535;
pub typedef SDL_EventType u32;
pub typedef SDL_CommonEvent struct {
    type: Uint32,
    timestamp: Uint32,
};
pub typedef SDL_DisplayEvent struct {
    type: Uint32,
    timestamp: Uint32,
    display: Uint32,
    event: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    data1: Sint32,
};
pub typedef SDL_WindowEvent struct {
    type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    event: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    data1: Sint32,
    data2: Sint32,
};
pub typedef SDL_KeyboardEvent struct {
    type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    state: Uint8,
    repeat: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    keysym: SDL_Keysym,
};
pub typedef SDL_TextEditingEvent struct {
    type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    text: [32]i8,
    start: Sint32,
    length: Sint32,
};
pub typedef SDL_TextInputEvent struct {
    type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    text: [32]i8,
};
pub typedef SDL_MouseMotionEvent struct {
    type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    which: Uint32,
    state: Uint32,
    x: Sint32,
    y: Sint32,
    xrel: Sint32,
    yrel: Sint32,
};
pub typedef SDL_MouseButtonEvent struct {
    type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    which: Uint32,
    button: Uint8,
    state: Uint8,
    clicks: Uint8,
    padding1: Uint8,
    x: Sint32,
    y: Sint32,
};
pub typedef SDL_MouseWheelEvent struct {
    type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    which: Uint32,
    x: Sint32,
    y: Sint32,
    direction: Uint32,
};
pub typedef SDL_JoyAxisEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    axis: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    value: Sint16,
    padding4: Uint16,
};
pub typedef SDL_JoyBallEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    ball: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    xrel: Sint16,
    yrel: Sint16,
};
pub typedef SDL_JoyHatEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    hat: Uint8,
    value: Uint8,
    padding1: Uint8,
    padding2: Uint8,
};
pub typedef SDL_JoyButtonEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    button: Uint8,
    state: Uint8,
    padding1: Uint8,
    padding2: Uint8,
};
pub typedef SDL_JoyDeviceEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: Sint32,
};
pub typedef SDL_ControllerAxisEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    axis: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    value: Sint16,
    padding4: Uint16,
};
pub typedef SDL_ControllerButtonEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    button: Uint8,
    state: Uint8,
    padding1: Uint8,
    padding2: Uint8,
};
pub typedef SDL_ControllerDeviceEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: Sint32,
};
pub typedef SDL_AudioDeviceEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: Uint32,
    iscapture: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
};
pub typedef SDL_TouchFingerEvent struct {
    type: Uint32,
    timestamp: Uint32,
    touchId: SDL_TouchID,
    fingerId: SDL_FingerID,
    x: float,
    y: float,
    dx: float,
    dy: float,
    pressure: float,
};
pub typedef SDL_MultiGestureEvent struct {
    type: Uint32,
    timestamp: Uint32,
    touchId: SDL_TouchID,
    dTheta: float,
    dDist: float,
    x: float,
    y: float,
    numFingers: Uint16,
    padding: Uint16,
};
pub typedef SDL_DollarGestureEvent struct {
    type: Uint32,
    timestamp: Uint32,
    touchId: SDL_TouchID,
    gestureId: SDL_GestureID,
    numFingers: Uint32,
    error: float,
    x: float,
    y: float,
};
pub typedef SDL_DropEvent struct {
    type: Uint32,
    timestamp: Uint32,
    file: *i8,
    windowID: Uint32,
};
pub typedef SDL_SensorEvent struct {
    type: Uint32,
    timestamp: Uint32,
    which: Sint32,
    data: [6]float,
};
pub typedef SDL_QuitEvent struct {
    type: Uint32,
    timestamp: Uint32,
};
pub typedef SDL_OSEvent struct {
    type: Uint32,
    timestamp: Uint32,
};
pub typedef SDL_UserEvent struct {
    type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    code: Sint32,
    data1: *void,
    data2: *void,
};
pub typedef SDL_SysWMmsg struct {
};
pub typedef SDL_SysWMEvent struct {
    type: Uint32,
    timestamp: Uint32,
    msg: *SDL_SysWMmsg,
};
pub typedef SDL_Event union {
    type: Uint32,
    common: SDL_CommonEvent,
    display: SDL_DisplayEvent,
    window: SDL_WindowEvent,
    key: SDL_KeyboardEvent,
    edit: SDL_TextEditingEvent,
    text: SDL_TextInputEvent,
    motion: SDL_MouseMotionEvent,
    button: SDL_MouseButtonEvent,
    wheel: SDL_MouseWheelEvent,
    jaxis: SDL_JoyAxisEvent,
    jball: SDL_JoyBallEvent,
    jhat: SDL_JoyHatEvent,
    jbutton: SDL_JoyButtonEvent,
    jdevice: SDL_JoyDeviceEvent,
    caxis: SDL_ControllerAxisEvent,
    cbutton: SDL_ControllerButtonEvent,
    cdevice: SDL_ControllerDeviceEvent,
    adevice: SDL_AudioDeviceEvent,
    sensor: SDL_SensorEvent,
    quit: SDL_QuitEvent,
    user: SDL_UserEvent,
    syswm: SDL_SysWMEvent,
    tfinger: SDL_TouchFingerEvent,
    mgesture: SDL_MultiGestureEvent,
    dgesture: SDL_DollarGestureEvent,
    drop: SDL_DropEvent,
    padding: [56]Uint8,
};
pub typedef SDL_compile_time_assert_SDL_Event [1]i32;
pub extern fn SDL_PumpEvents();
pub const SDL_ADDEVENT: u32 = 0;
pub const SDL_PEEKEVENT: u32 = 1;
pub const SDL_GETEVENT: u32 = 2;
pub typedef SDL_eventaction u32;
pub extern fn SDL_PeepEvents(events: *SDL_Event, numevents: i32, action: SDL_eventaction, minType: Uint32, maxType: Uint32) -> i32;
pub extern fn SDL_HasEvent(type: Uint32) -> SDL_bool;
pub extern fn SDL_HasEvents(minType: Uint32, maxType: Uint32) -> SDL_bool;
pub extern fn SDL_FlushEvent(type: Uint32);
pub extern fn SDL_FlushEvents(minType: Uint32, maxType: Uint32);
pub extern fn SDL_PollEvent(event: *SDL_Event) -> i32;
pub extern fn SDL_WaitEvent(event: *SDL_Event) -> i32;
pub extern fn SDL_WaitEventTimeout(event: *SDL_Event, timeout: i32) -> i32;
pub extern fn SDL_PushEvent(event: *SDL_Event) -> i32;
pub typedef SDL_EventFilter fn* (_: *void, _: *SDL_Event) -> i32;
pub extern fn SDL_SetEventFilter(filter: SDL_EventFilter, userdata: *void);
pub extern fn SDL_GetEventFilter(filter: *SDL_EventFilter, userdata: **void) -> SDL_bool;
pub extern fn SDL_AddEventWatch(filter: SDL_EventFilter, userdata: *void);
pub extern fn SDL_DelEventWatch(filter: SDL_EventFilter, userdata: *void);
pub extern fn SDL_FilterEvents(filter: SDL_EventFilter, userdata: *void);
pub extern fn SDL_EventState(type: Uint32, state: i32) -> Uint8;
pub extern fn SDL_RegisterEvents(numevents: i32) -> Uint32;
pub extern fn SDL_GetBasePath() -> *i8;
pub extern fn SDL_GetPrefPath(org: *i8, app: *i8) -> *i8;
pub typedef _SDL_Haptic struct {
};
pub typedef SDL_Haptic _SDL_Haptic;
pub typedef SDL_HapticDirection struct {
    type: Uint8,
    dir: [3]Sint32,
};
pub typedef SDL_HapticConstant struct {
    type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    level: Sint16,
    attack_length: Uint16,
    attack_level: Uint16,
    fade_length: Uint16,
    fade_level: Uint16,
};
pub typedef SDL_HapticPeriodic struct {
    type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    period: Uint16,
    magnitude: Sint16,
    offset: Sint16,
    phase: Uint16,
    attack_length: Uint16,
    attack_level: Uint16,
    fade_length: Uint16,
    fade_level: Uint16,
};
pub typedef SDL_HapticCondition struct {
    type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    right_sat: [3]Uint16,
    left_sat: [3]Uint16,
    right_coeff: [3]Sint16,
    left_coeff: [3]Sint16,
    deadband: [3]Uint16,
    center: [3]Sint16,
};
pub typedef SDL_HapticRamp struct {
    type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    start: Sint16,
    end: Sint16,
    attack_length: Uint16,
    attack_level: Uint16,
    fade_length: Uint16,
    fade_level: Uint16,
};
pub typedef SDL_HapticLeftRight struct {
    type: Uint16,
    length: Uint32,
    large_magnitude: Uint16,
    small_magnitude: Uint16,
};
pub typedef SDL_HapticCustom struct {
    type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    channels: Uint8,
    period: Uint16,
    samples: Uint16,
    data: *Uint16,
    attack_length: Uint16,
    attack_level: Uint16,
    fade_length: Uint16,
    fade_level: Uint16,
};
pub typedef SDL_HapticEffect union {
    type: Uint16,
    constant: SDL_HapticConstant,
    periodic: SDL_HapticPeriodic,
    condition: SDL_HapticCondition,
    ramp: SDL_HapticRamp,
    leftright: SDL_HapticLeftRight,
    custom: SDL_HapticCustom,
};
pub extern fn SDL_NumHaptics() -> i32;
pub extern fn SDL_HapticName(device_index: i32) -> *i8;
pub extern fn SDL_HapticOpen(device_index: i32) -> *SDL_Haptic;
pub extern fn SDL_HapticOpened(device_index: i32) -> i32;
pub extern fn SDL_HapticIndex(haptic: *SDL_Haptic) -> i32;
pub extern fn SDL_MouseIsHaptic() -> i32;
pub extern fn SDL_HapticOpenFromMouse() -> *SDL_Haptic;
pub extern fn SDL_JoystickIsHaptic(joystick: *SDL_Joystick) -> i32;
pub extern fn SDL_HapticOpenFromJoystick(joystick: *SDL_Joystick) -> *SDL_Haptic;
pub extern fn SDL_HapticClose(haptic: *SDL_Haptic);
pub extern fn SDL_HapticNumEffects(haptic: *SDL_Haptic) -> i32;
pub extern fn SDL_HapticNumEffectsPlaying(haptic: *SDL_Haptic) -> i32;
pub extern fn SDL_HapticQuery(haptic: *SDL_Haptic) -> u32;
pub extern fn SDL_HapticNumAxes(haptic: *SDL_Haptic) -> i32;
pub extern fn SDL_HapticEffectSupported(haptic: *SDL_Haptic, effect: *SDL_HapticEffect) -> i32;
pub extern fn SDL_HapticNewEffect(haptic: *SDL_Haptic, effect: *SDL_HapticEffect) -> i32;
pub extern fn SDL_HapticUpdateEffect(haptic: *SDL_Haptic, effect: i32, data: *SDL_HapticEffect) -> i32;
pub extern fn SDL_HapticRunEffect(haptic: *SDL_Haptic, effect: i32, iterations: Uint32) -> i32;
pub extern fn SDL_HapticStopEffect(haptic: *SDL_Haptic, effect: i32) -> i32;
pub extern fn SDL_HapticDestroyEffect(haptic: *SDL_Haptic, effect: i32);
pub extern fn SDL_HapticGetEffectStatus(haptic: *SDL_Haptic, effect: i32) -> i32;
pub extern fn SDL_HapticSetGain(haptic: *SDL_Haptic, gain: i32) -> i32;
pub extern fn SDL_HapticSetAutocenter(haptic: *SDL_Haptic, autocenter: i32) -> i32;
pub extern fn SDL_HapticPause(haptic: *SDL_Haptic) -> i32;
pub extern fn SDL_HapticUnpause(haptic: *SDL_Haptic) -> i32;
pub extern fn SDL_HapticStopAll(haptic: *SDL_Haptic) -> i32;
pub extern fn SDL_HapticRumbleSupported(haptic: *SDL_Haptic) -> i32;
pub extern fn SDL_HapticRumbleInit(haptic: *SDL_Haptic) -> i32;
pub extern fn SDL_HapticRumblePlay(haptic: *SDL_Haptic, strength: float, length: Uint32) -> i32;
pub extern fn SDL_HapticRumbleStop(haptic: *SDL_Haptic) -> i32;
pub const SDL_HINT_DEFAULT: u32 = 0;
pub const SDL_HINT_NORMAL: u32 = 1;
pub const SDL_HINT_OVERRIDE: u32 = 2;
pub typedef SDL_HintPriority u32;
pub extern fn SDL_SetHintWithPriority(name: *i8, value: *i8, priority: SDL_HintPriority) -> SDL_bool;
pub extern fn SDL_SetHint(name: *i8, value: *i8) -> SDL_bool;
pub extern fn SDL_GetHint(name: *i8) -> *i8;
pub extern fn SDL_GetHintBoolean(name: *i8, default_value: SDL_bool) -> SDL_bool;
pub typedef SDL_HintCallback fn* (_: *void, _: *i8, _: *i8, _: *i8);
pub extern fn SDL_AddHintCallback(name: *i8, callback: SDL_HintCallback, userdata: *void);
pub extern fn SDL_DelHintCallback(name: *i8, callback: SDL_HintCallback, userdata: *void);
pub extern fn SDL_ClearHints();
pub extern fn SDL_LoadObject(sofile: *i8) -> *void;
pub extern fn SDL_LoadFunction(handle: *void, name: *i8) -> *void;
pub extern fn SDL_UnloadObject(handle: *void);
pub const SDL_LOG_CATEGORY_APPLICATION: u32 = 0;
pub const SDL_LOG_CATEGORY_ERROR: u32 = 1;
pub const SDL_LOG_CATEGORY_ASSERT: u32 = 2;
pub const SDL_LOG_CATEGORY_SYSTEM: u32 = 3;
pub const SDL_LOG_CATEGORY_AUDIO: u32 = 4;
pub const SDL_LOG_CATEGORY_VIDEO: u32 = 5;
pub const SDL_LOG_CATEGORY_RENDER: u32 = 6;
pub const SDL_LOG_CATEGORY_INPUT: u32 = 7;
pub const SDL_LOG_CATEGORY_TEST: u32 = 8;
pub const SDL_LOG_CATEGORY_RESERVED1: u32 = 9;
pub const SDL_LOG_CATEGORY_RESERVED2: u32 = 10;
pub const SDL_LOG_CATEGORY_RESERVED3: u32 = 11;
pub const SDL_LOG_CATEGORY_RESERVED4: u32 = 12;
pub const SDL_LOG_CATEGORY_RESERVED5: u32 = 13;
pub const SDL_LOG_CATEGORY_RESERVED6: u32 = 14;
pub const SDL_LOG_CATEGORY_RESERVED7: u32 = 15;
pub const SDL_LOG_CATEGORY_RESERVED8: u32 = 16;
pub const SDL_LOG_CATEGORY_RESERVED9: u32 = 17;
pub const SDL_LOG_CATEGORY_RESERVED10: u32 = 18;
pub const SDL_LOG_CATEGORY_CUSTOM: u32 = 19;
pub const SDL_LOG_PRIORITY_VERBOSE: u32 = 1;
pub const SDL_LOG_PRIORITY_DEBUG: u32 = 2;
pub const SDL_LOG_PRIORITY_INFO: u32 = 3;
pub const SDL_LOG_PRIORITY_WARN: u32 = 4;
pub const SDL_LOG_PRIORITY_ERROR: u32 = 5;
pub const SDL_LOG_PRIORITY_CRITICAL: u32 = 6;
pub const SDL_NUM_LOG_PRIORITIES: u32 = 7;
pub typedef SDL_LogPriority u32;
pub extern fn SDL_LogSetAllPriority(priority: SDL_LogPriority);
pub extern fn SDL_LogSetPriority(category: i32, priority: SDL_LogPriority);
pub extern fn SDL_LogGetPriority(category: i32) -> SDL_LogPriority;
pub extern fn SDL_LogResetPriorities();
pub extern fn SDL_Log(fmt: *i8);
pub extern fn SDL_LogVerbose(category: i32, fmt: *i8);
pub extern fn SDL_LogDebug(category: i32, fmt: *i8);
pub extern fn SDL_LogInfo(category: i32, fmt: *i8);
pub extern fn SDL_LogWarn(category: i32, fmt: *i8);
pub extern fn SDL_LogError(category: i32, fmt: *i8);
pub extern fn SDL_LogCritical(category: i32, fmt: *i8);
pub extern fn SDL_LogMessage(category: i32, priority: SDL_LogPriority, fmt: *i8);
pub typedef SDL_LogOutputFunction fn* (_: *void, _: i32, _: SDL_LogPriority, _: *i8);
pub extern fn SDL_LogGetOutputFunction(callback: *SDL_LogOutputFunction, userdata: **void);
pub extern fn SDL_LogSetOutputFunction(callback: SDL_LogOutputFunction, userdata: *void);
pub const SDL_MESSAGEBOX_ERROR: u32 = 16;
pub const SDL_MESSAGEBOX_WARNING: u32 = 32;
pub const SDL_MESSAGEBOX_INFORMATION: u32 = 64;
pub typedef SDL_MessageBoxFlags u32;
pub const SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT: u32 = 1;
pub const SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT: u32 = 2;
pub typedef SDL_MessageBoxButtonFlags u32;
pub typedef SDL_MessageBoxButtonData struct {
    flags: Uint32,
    buttonid: i32,
    text: *i8,
};
pub typedef SDL_MessageBoxColor struct {
    r: Uint8,
    g: Uint8,
    b: Uint8,
};
pub const SDL_MESSAGEBOX_COLOR_BACKGROUND: u32 = 0;
pub const SDL_MESSAGEBOX_COLOR_TEXT: u32 = 1;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BORDER: u32 = 2;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND: u32 = 3;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED: u32 = 4;
pub const SDL_MESSAGEBOX_COLOR_MAX: u32 = 5;
pub typedef SDL_MessageBoxColorType u32;
pub typedef SDL_MessageBoxColorScheme struct {
    colors: [5]SDL_MessageBoxColor,
};
pub typedef SDL_MessageBoxData struct {
    flags: Uint32,
    window: *SDL_Window,
    title: *i8,
    message: *i8,
    numbuttons: i32,
    buttons: *SDL_MessageBoxButtonData,
    colorScheme: *SDL_MessageBoxColorScheme,
};
pub extern fn SDL_ShowMessageBox(messageboxdata: *SDL_MessageBoxData, buttonid: *i32) -> i32;
pub extern fn SDL_ShowSimpleMessageBox(flags: Uint32, title: *i8, message: *i8, window: *SDL_Window) -> i32;
pub const SDL_POWERSTATE_UNKNOWN: u32 = 0;
pub const SDL_POWERSTATE_ON_BATTERY: u32 = 1;
pub const SDL_POWERSTATE_NO_BATTERY: u32 = 2;
pub const SDL_POWERSTATE_CHARGING: u32 = 3;
pub const SDL_POWERSTATE_CHARGED: u32 = 4;
pub typedef SDL_PowerState u32;
pub extern fn SDL_GetPowerInfo(secs: *i32, pct: *i32) -> SDL_PowerState;
pub const SDL_RENDERER_SOFTWARE: u32 = 1;
pub const SDL_RENDERER_ACCELERATED: u32 = 2;
pub const SDL_RENDERER_PRESENTVSYNC: u32 = 4;
pub const SDL_RENDERER_TARGETTEXTURE: u32 = 8;
pub typedef SDL_RendererFlags u32;
pub typedef SDL_RendererInfo struct {
    name: *i8,
    flags: Uint32,
    num_texture_formats: Uint32,
    texture_formats: [16]Uint32,
    max_texture_width: i32,
    max_texture_height: i32,
};
pub const SDL_TEXTUREACCESS_STATIC: u32 = 0;
pub const SDL_TEXTUREACCESS_STREAMING: u32 = 1;
pub const SDL_TEXTUREACCESS_TARGET: u32 = 2;
pub typedef SDL_TextureAccess u32;
pub const SDL_TEXTUREMODULATE_NONE: u32 = 0;
pub const SDL_TEXTUREMODULATE_COLOR: u32 = 1;
pub const SDL_TEXTUREMODULATE_ALPHA: u32 = 2;
pub typedef SDL_TextureModulate u32;
pub const SDL_FLIP_NONE: u32 = 0;
pub const SDL_FLIP_HORIZONTAL: u32 = 1;
pub const SDL_FLIP_VERTICAL: u32 = 2;
pub typedef SDL_RendererFlip u32;
pub typedef SDL_Renderer struct {
};
pub typedef SDL_Texture struct {
};
pub extern fn SDL_GetNumRenderDrivers() -> i32;
pub extern fn SDL_GetRenderDriverInfo(index: i32, info: *SDL_RendererInfo) -> i32;
pub extern fn SDL_CreateWindowAndRenderer(width: i32, height: i32, window_flags: Uint32, window: **SDL_Window, renderer: **SDL_Renderer) -> i32;
pub extern fn SDL_CreateRenderer(window: *SDL_Window, index: i32, flags: Uint32) -> *SDL_Renderer;
pub extern fn SDL_CreateSoftwareRenderer(surface: *SDL_Surface) -> *SDL_Renderer;
pub extern fn SDL_GetRenderer(window: *SDL_Window) -> *SDL_Renderer;
pub extern fn SDL_GetRendererInfo(renderer: *SDL_Renderer, info: *SDL_RendererInfo) -> i32;
pub extern fn SDL_GetRendererOutputSize(renderer: *SDL_Renderer, w: *i32, h: *i32) -> i32;
pub extern fn SDL_CreateTexture(renderer: *SDL_Renderer, format: Uint32, access: i32, w: i32, h: i32) -> *SDL_Texture;
pub extern fn SDL_CreateTextureFromSurface(renderer: *SDL_Renderer, surface: *SDL_Surface) -> *SDL_Texture;
pub extern fn SDL_QueryTexture(texture: *SDL_Texture, format: *Uint32, access: *i32, w: *i32, h: *i32) -> i32;
pub extern fn SDL_SetTextureColorMod(texture: *SDL_Texture, r: Uint8, g: Uint8, b: Uint8) -> i32;
pub extern fn SDL_GetTextureColorMod(texture: *SDL_Texture, r: *Uint8, g: *Uint8, b: *Uint8) -> i32;
pub extern fn SDL_SetTextureAlphaMod(texture: *SDL_Texture, alpha: Uint8) -> i32;
pub extern fn SDL_GetTextureAlphaMod(texture: *SDL_Texture, alpha: *Uint8) -> i32;
pub extern fn SDL_SetTextureBlendMode(texture: *SDL_Texture, blendMode: SDL_BlendMode) -> i32;
pub extern fn SDL_GetTextureBlendMode(texture: *SDL_Texture, blendMode: *SDL_BlendMode) -> i32;
pub extern fn SDL_UpdateTexture(texture: *SDL_Texture, rect: *SDL_Rect, pixels: *void, pitch: i32) -> i32;
pub extern fn SDL_UpdateYUVTexture(texture: *SDL_Texture, rect: *SDL_Rect, Yplane: *Uint8, Ypitch: i32, Uplane: *Uint8, Upitch: i32, Vplane: *Uint8, Vpitch: i32) -> i32;
pub extern fn SDL_LockTexture(texture: *SDL_Texture, rect: *SDL_Rect, pixels: **void, pitch: *i32) -> i32;
pub extern fn SDL_UnlockTexture(texture: *SDL_Texture);
pub extern fn SDL_RenderTargetSupported(renderer: *SDL_Renderer) -> SDL_bool;
pub extern fn SDL_SetRenderTarget(renderer: *SDL_Renderer, texture: *SDL_Texture) -> i32;
pub extern fn SDL_GetRenderTarget(renderer: *SDL_Renderer) -> *SDL_Texture;
pub extern fn SDL_RenderSetLogicalSize(renderer: *SDL_Renderer, w: i32, h: i32) -> i32;
pub extern fn SDL_RenderGetLogicalSize(renderer: *SDL_Renderer, w: *i32, h: *i32);
pub extern fn SDL_RenderSetIntegerScale(renderer: *SDL_Renderer, enable: SDL_bool) -> i32;
pub extern fn SDL_RenderGetIntegerScale(renderer: *SDL_Renderer) -> SDL_bool;
pub extern fn SDL_RenderSetViewport(renderer: *SDL_Renderer, rect: *SDL_Rect) -> i32;
pub extern fn SDL_RenderGetViewport(renderer: *SDL_Renderer, rect: *SDL_Rect);
pub extern fn SDL_RenderSetClipRect(renderer: *SDL_Renderer, rect: *SDL_Rect) -> i32;
pub extern fn SDL_RenderGetClipRect(renderer: *SDL_Renderer, rect: *SDL_Rect);
pub extern fn SDL_RenderIsClipEnabled(renderer: *SDL_Renderer) -> SDL_bool;
pub extern fn SDL_RenderSetScale(renderer: *SDL_Renderer, scaleX: float, scaleY: float) -> i32;
pub extern fn SDL_RenderGetScale(renderer: *SDL_Renderer, scaleX: *float, scaleY: *float);
pub extern fn SDL_SetRenderDrawColor(renderer: *SDL_Renderer, r: Uint8, g: Uint8, b: Uint8, a: Uint8) -> i32;
pub extern fn SDL_GetRenderDrawColor(renderer: *SDL_Renderer, r: *Uint8, g: *Uint8, b: *Uint8, a: *Uint8) -> i32;
pub extern fn SDL_SetRenderDrawBlendMode(renderer: *SDL_Renderer, blendMode: SDL_BlendMode) -> i32;
pub extern fn SDL_GetRenderDrawBlendMode(renderer: *SDL_Renderer, blendMode: *SDL_BlendMode) -> i32;
pub extern fn SDL_RenderClear(renderer: *SDL_Renderer) -> i32;
pub extern fn SDL_RenderDrawPoint(renderer: *SDL_Renderer, x: i32, y: i32) -> i32;
pub extern fn SDL_RenderDrawPoints(renderer: *SDL_Renderer, points: *SDL_Point, count: i32) -> i32;
pub extern fn SDL_RenderDrawLine(renderer: *SDL_Renderer, x1: i32, y1: i32, x2: i32, y2: i32) -> i32;
pub extern fn SDL_RenderDrawLines(renderer: *SDL_Renderer, points: *SDL_Point, count: i32) -> i32;
pub extern fn SDL_RenderDrawRect(renderer: *SDL_Renderer, rect: *SDL_Rect) -> i32;
pub extern fn SDL_RenderDrawRects(renderer: *SDL_Renderer, rects: *SDL_Rect, count: i32) -> i32;
pub extern fn SDL_RenderFillRect(renderer: *SDL_Renderer, rect: *SDL_Rect) -> i32;
pub extern fn SDL_RenderFillRects(renderer: *SDL_Renderer, rects: *SDL_Rect, count: i32) -> i32;
pub extern fn SDL_RenderCopy(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_Rect, dstrect: *SDL_Rect) -> i32;
pub extern fn SDL_RenderCopyEx(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_Rect, dstrect: *SDL_Rect, angle: double, center: *SDL_Point, flip: SDL_RendererFlip) -> i32;
pub extern fn SDL_RenderDrawPointF(renderer: *SDL_Renderer, x: float, y: float) -> i32;
pub extern fn SDL_RenderDrawPointsF(renderer: *SDL_Renderer, points: *SDL_FPoint, count: i32) -> i32;
pub extern fn SDL_RenderDrawLineF(renderer: *SDL_Renderer, x1: float, y1: float, x2: float, y2: float) -> i32;
pub extern fn SDL_RenderDrawLinesF(renderer: *SDL_Renderer, points: *SDL_FPoint, count: i32) -> i32;
pub extern fn SDL_RenderDrawRectF(renderer: *SDL_Renderer, rect: *SDL_FRect) -> i32;
pub extern fn SDL_RenderDrawRectsF(renderer: *SDL_Renderer, rects: *SDL_FRect, count: i32) -> i32;
pub extern fn SDL_RenderFillRectF(renderer: *SDL_Renderer, rect: *SDL_FRect) -> i32;
pub extern fn SDL_RenderFillRectsF(renderer: *SDL_Renderer, rects: *SDL_FRect, count: i32) -> i32;
pub extern fn SDL_RenderCopyF(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_Rect, dstrect: *SDL_FRect) -> i32;
pub extern fn SDL_RenderCopyExF(renderer: *SDL_Renderer, texture: *SDL_Texture, srcrect: *SDL_Rect, dstrect: *SDL_FRect, angle: double, center: *SDL_FPoint, flip: SDL_RendererFlip) -> i32;
pub extern fn SDL_RenderReadPixels(renderer: *SDL_Renderer, rect: *SDL_Rect, format: Uint32, pixels: *void, pitch: i32) -> i32;
pub extern fn SDL_RenderPresent(renderer: *SDL_Renderer);
pub extern fn SDL_DestroyTexture(texture: *SDL_Texture);
pub extern fn SDL_DestroyRenderer(renderer: *SDL_Renderer);
pub extern fn SDL_RenderFlush(renderer: *SDL_Renderer) -> i32;
pub extern fn SDL_GL_BindTexture(texture: *SDL_Texture, texw: *float, texh: *float) -> i32;
pub extern fn SDL_GL_UnbindTexture(texture: *SDL_Texture) -> i32;
pub extern fn SDL_RenderGetMetalLayer(renderer: *SDL_Renderer) -> *void;
pub extern fn SDL_RenderGetMetalCommandEncoder(renderer: *SDL_Renderer) -> *void;
pub typedef _SDL_Sensor struct {
};
pub typedef SDL_Sensor _SDL_Sensor;
pub typedef SDL_SensorID Sint32;
pub const SDL_SENSOR_INVALID: i32 = -1;
pub const SDL_SENSOR_UNKNOWN: i32 = 0;
pub const SDL_SENSOR_ACCEL: i32 = 1;
pub const SDL_SENSOR_GYRO: i32 = 2;
pub typedef SDL_SensorType i32;
pub extern fn SDL_NumSensors() -> i32;
pub extern fn SDL_SensorGetDeviceName(device_index: i32) -> *i8;
pub extern fn SDL_SensorGetDeviceType(device_index: i32) -> SDL_SensorType;
pub extern fn SDL_SensorGetDeviceNonPortableType(device_index: i32) -> i32;
pub extern fn SDL_SensorGetDeviceInstanceID(device_index: i32) -> SDL_SensorID;
pub extern fn SDL_SensorOpen(device_index: i32) -> *SDL_Sensor;
pub extern fn SDL_SensorFromInstanceID(instance_id: SDL_SensorID) -> *SDL_Sensor;
pub extern fn SDL_SensorGetName(sensor: *SDL_Sensor) -> *i8;
pub extern fn SDL_SensorGetType(sensor: *SDL_Sensor) -> SDL_SensorType;
pub extern fn SDL_SensorGetNonPortableType(sensor: *SDL_Sensor) -> i32;
pub extern fn SDL_SensorGetInstanceID(sensor: *SDL_Sensor) -> SDL_SensorID;
pub extern fn SDL_SensorGetData(sensor: *SDL_Sensor, data: *float, num_values: i32) -> i32;
pub extern fn SDL_SensorClose(sensor: *SDL_Sensor);
pub extern fn SDL_SensorUpdate();
pub extern fn SDL_CreateShapedWindow(title: *i8, x: u32, y: u32, w: u32, h: u32, flags: Uint32) -> *SDL_Window;
pub extern fn SDL_IsShapedWindow(window: *SDL_Window) -> SDL_bool;
pub const ShapeModeDefault: u32 = 0;
pub const ShapeModeBinarizeAlpha: u32 = 1;
pub const ShapeModeReverseBinarizeAlpha: u32 = 2;
pub const ShapeModeColorKey: u32 = 3;
pub typedef WindowShapeMode u32;
pub typedef SDL_WindowShapeParams union {
    binarizationCutoff: Uint8,
    colorKey: SDL_Color,
};
pub typedef SDL_WindowShapeMode struct {
    mode: WindowShapeMode,
    parameters: SDL_WindowShapeParams,
};
pub extern fn SDL_SetWindowShape(window: *SDL_Window, shape: *SDL_Surface, shape_mode: *SDL_WindowShapeMode) -> i32;
pub extern fn SDL_GetShapedWindowMode(window: *SDL_Window, shape_mode: *SDL_WindowShapeMode) -> i32;
pub extern fn SDL_LinuxSetThreadPriority(threadID: Sint64, priority: i32) -> i32;
pub extern fn SDL_IsTablet() -> SDL_bool;
pub extern fn SDL_GetTicks() -> Uint32;
pub extern fn SDL_GetPerformanceCounter() -> Uint64;
pub extern fn SDL_GetPerformanceFrequency() -> Uint64;
pub extern fn SDL_Delay(ms: Uint32);
pub typedef SDL_TimerCallback fn* (_: Uint32, _: *void) -> Uint32;
pub typedef SDL_TimerID i32;
pub extern fn SDL_AddTimer(interval: Uint32, callback: SDL_TimerCallback, param: *void) -> SDL_TimerID;
pub extern fn SDL_RemoveTimer(id: SDL_TimerID) -> SDL_bool;
pub typedef SDL_version struct {
    major: Uint8,
    minor: Uint8,
    patch: Uint8,
};
pub extern fn SDL_GetVersion(ver: *SDL_version);
pub extern fn SDL_GetRevision() -> *i8;
pub extern fn SDL_GetRevisionNumber() -> i32;
pub extern fn SDL_Init(flags: Uint32) -> i32;
pub extern fn SDL_InitSubSystem(flags: Uint32) -> i32;
pub extern fn SDL_QuitSubSystem(flags: Uint32);
pub extern fn SDL_WasInit(flags: Uint32) -> Uint32;
pub extern fn SDL_Quit();

