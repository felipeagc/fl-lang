import "core:c";

typedef Vec3 @vector_type(float, 3);

fn v3_dot(u: Vec3, v: Vec3) -> float {
    return u.x * v.x + u.y * v.y + u.z * v.z;
}

fn v3_cross(u: Vec3, v: Vec3) -> Vec3 {
    return Vec3{
        u.y * v.z - u.z * v.y,
        u.z * v.x - u.x * v.z,
        u.x * v.y - u.y * v.x,
    };
}

fn v3_length(u: Vec3) -> float {
    return @sqrt(v3_dot(u, u));
}

typedef Ray struct {
    origin: Vec3,
    dir: Vec3,
};

fn ray_at(ray: Ray, t: float) -> Vec3 {
    return ray.origin + (ray.dir * t);
}

fn hit_sphere(center: Vec3, radius: float, ray: Ray) -> bool {
    var oc = ray.origin - center;
    var a = v3_dot(ray.dir, ray.dir);
    var b = 2.0 * v3_dot(oc, ray.dir);
    var c = v3_dot(oc, oc) - radius * radius;
    var discriminant = b * b - 4 * a * c;
    return discriminant > 0;
}

extern fn main() -> i32 {
    printf(c"dot = %f\n", v3_dot(Vec3{1, 2, 3}, Vec3{3, 2, 1}));
    printf(c"sin(0.5) = %lf\n", @sin(0.5));
    return 0;
}
